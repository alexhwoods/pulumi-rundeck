// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rundeck

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The private key resource allows SSH private keys to be stored into Rundeck's key store.
// The key store is where Rundeck keeps credentials that are needed to access the nodes on which
// it runs commands.
type RundeckPrivateKey struct {
	pulumi.CustomResourceState

	// The private key material to store, serialized in any way that is
	// accepted by OpenSSH.
	KeyMaterial pulumi.StringOutput `pulumi:"keyMaterial"`
	// The path within the key store where the key will be stored.
	Path pulumi.StringOutput `pulumi:"path"`
}

// NewRundeckPrivateKey registers a new resource with the given unique name, arguments, and options.
func NewRundeckPrivateKey(ctx *pulumi.Context,
	name string, args *RundeckPrivateKeyArgs, opts ...pulumi.ResourceOption) (*RundeckPrivateKey, error) {
	if args == nil || args.KeyMaterial == nil {
		return nil, errors.New("missing required argument 'KeyMaterial'")
	}
	if args == nil || args.Path == nil {
		return nil, errors.New("missing required argument 'Path'")
	}
	if args == nil {
		args = &RundeckPrivateKeyArgs{}
	}
	var resource RundeckPrivateKey
	err := ctx.RegisterResource("rundeck:index/rundeckPrivateKey:RundeckPrivateKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRundeckPrivateKey gets an existing RundeckPrivateKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRundeckPrivateKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RundeckPrivateKeyState, opts ...pulumi.ResourceOption) (*RundeckPrivateKey, error) {
	var resource RundeckPrivateKey
	err := ctx.ReadResource("rundeck:index/rundeckPrivateKey:RundeckPrivateKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RundeckPrivateKey resources.
type rundeckPrivateKeyState struct {
	// The private key material to store, serialized in any way that is
	// accepted by OpenSSH.
	KeyMaterial *string `pulumi:"keyMaterial"`
	// The path within the key store where the key will be stored.
	Path *string `pulumi:"path"`
}

type RundeckPrivateKeyState struct {
	// The private key material to store, serialized in any way that is
	// accepted by OpenSSH.
	KeyMaterial pulumi.StringPtrInput
	// The path within the key store where the key will be stored.
	Path pulumi.StringPtrInput
}

func (RundeckPrivateKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*rundeckPrivateKeyState)(nil)).Elem()
}

type rundeckPrivateKeyArgs struct {
	// The private key material to store, serialized in any way that is
	// accepted by OpenSSH.
	KeyMaterial string `pulumi:"keyMaterial"`
	// The path within the key store where the key will be stored.
	Path string `pulumi:"path"`
}

// The set of arguments for constructing a RundeckPrivateKey resource.
type RundeckPrivateKeyArgs struct {
	// The private key material to store, serialized in any way that is
	// accepted by OpenSSH.
	KeyMaterial pulumi.StringInput
	// The path within the key store where the key will be stored.
	Path pulumi.StringInput
}

func (RundeckPrivateKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rundeckPrivateKeyArgs)(nil)).Elem()
}
