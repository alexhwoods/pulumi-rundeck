// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rundeck

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type RundeckJobCommand struct {
	// A longer description of the job, describing the job in the Rundeck UI.
	Description *string `pulumi:"description"`
	// gives a whole shell script, inline in the configuration, to execute on the nodes.
	InlineScript    *string                           `pulumi:"inlineScript"`
	Jobs            []RundeckJobCommandJob            `pulumi:"jobs"`
	NodeStepPlugins []RundeckJobCommandNodeStepPlugin `pulumi:"nodeStepPlugins"`
	// and `scriptFileArgs` together describe a script that is already pre-installed
	// on the nodes which is to be executed.
	ScriptFile     *string `pulumi:"scriptFile"`
	ScriptFileArgs *string `pulumi:"scriptFileArgs"`
	// gives a single shell command to execute on the nodes.
	ShellCommand *string                       `pulumi:"shellCommand"`
	StepPlugins  []RundeckJobCommandStepPlugin `pulumi:"stepPlugins"`
}

// RundeckJobCommandInput is an input type that accepts RundeckJobCommandArgs and RundeckJobCommandOutput values.
// You can construct a concrete instance of `RundeckJobCommandInput` via:
//
//          RundeckJobCommandArgs{...}
type RundeckJobCommandInput interface {
	pulumi.Input

	ToRundeckJobCommandOutput() RundeckJobCommandOutput
	ToRundeckJobCommandOutputWithContext(context.Context) RundeckJobCommandOutput
}

type RundeckJobCommandArgs struct {
	// A longer description of the job, describing the job in the Rundeck UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// gives a whole shell script, inline in the configuration, to execute on the nodes.
	InlineScript    pulumi.StringPtrInput                     `pulumi:"inlineScript"`
	Jobs            RundeckJobCommandJobArrayInput            `pulumi:"jobs"`
	NodeStepPlugins RundeckJobCommandNodeStepPluginArrayInput `pulumi:"nodeStepPlugins"`
	// and `scriptFileArgs` together describe a script that is already pre-installed
	// on the nodes which is to be executed.
	ScriptFile     pulumi.StringPtrInput `pulumi:"scriptFile"`
	ScriptFileArgs pulumi.StringPtrInput `pulumi:"scriptFileArgs"`
	// gives a single shell command to execute on the nodes.
	ShellCommand pulumi.StringPtrInput                 `pulumi:"shellCommand"`
	StepPlugins  RundeckJobCommandStepPluginArrayInput `pulumi:"stepPlugins"`
}

func (RundeckJobCommandArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RundeckJobCommand)(nil)).Elem()
}

func (i RundeckJobCommandArgs) ToRundeckJobCommandOutput() RundeckJobCommandOutput {
	return i.ToRundeckJobCommandOutputWithContext(context.Background())
}

func (i RundeckJobCommandArgs) ToRundeckJobCommandOutputWithContext(ctx context.Context) RundeckJobCommandOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RundeckJobCommandOutput)
}

// RundeckJobCommandArrayInput is an input type that accepts RundeckJobCommandArray and RundeckJobCommandArrayOutput values.
// You can construct a concrete instance of `RundeckJobCommandArrayInput` via:
//
//          RundeckJobCommandArray{ RundeckJobCommandArgs{...} }
type RundeckJobCommandArrayInput interface {
	pulumi.Input

	ToRundeckJobCommandArrayOutput() RundeckJobCommandArrayOutput
	ToRundeckJobCommandArrayOutputWithContext(context.Context) RundeckJobCommandArrayOutput
}

type RundeckJobCommandArray []RundeckJobCommandInput

func (RundeckJobCommandArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RundeckJobCommand)(nil)).Elem()
}

func (i RundeckJobCommandArray) ToRundeckJobCommandArrayOutput() RundeckJobCommandArrayOutput {
	return i.ToRundeckJobCommandArrayOutputWithContext(context.Background())
}

func (i RundeckJobCommandArray) ToRundeckJobCommandArrayOutputWithContext(ctx context.Context) RundeckJobCommandArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RundeckJobCommandArrayOutput)
}

type RundeckJobCommandOutput struct{ *pulumi.OutputState }

func (RundeckJobCommandOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RundeckJobCommand)(nil)).Elem()
}

func (o RundeckJobCommandOutput) ToRundeckJobCommandOutput() RundeckJobCommandOutput {
	return o
}

func (o RundeckJobCommandOutput) ToRundeckJobCommandOutputWithContext(ctx context.Context) RundeckJobCommandOutput {
	return o
}

// A longer description of the job, describing the job in the Rundeck UI.
func (o RundeckJobCommandOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RundeckJobCommand) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// gives a whole shell script, inline in the configuration, to execute on the nodes.
func (o RundeckJobCommandOutput) InlineScript() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RundeckJobCommand) *string { return v.InlineScript }).(pulumi.StringPtrOutput)
}

func (o RundeckJobCommandOutput) Jobs() RundeckJobCommandJobArrayOutput {
	return o.ApplyT(func(v RundeckJobCommand) []RundeckJobCommandJob { return v.Jobs }).(RundeckJobCommandJobArrayOutput)
}

func (o RundeckJobCommandOutput) NodeStepPlugins() RundeckJobCommandNodeStepPluginArrayOutput {
	return o.ApplyT(func(v RundeckJobCommand) []RundeckJobCommandNodeStepPlugin { return v.NodeStepPlugins }).(RundeckJobCommandNodeStepPluginArrayOutput)
}

// and `scriptFileArgs` together describe a script that is already pre-installed
// on the nodes which is to be executed.
func (o RundeckJobCommandOutput) ScriptFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RundeckJobCommand) *string { return v.ScriptFile }).(pulumi.StringPtrOutput)
}

func (o RundeckJobCommandOutput) ScriptFileArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RundeckJobCommand) *string { return v.ScriptFileArgs }).(pulumi.StringPtrOutput)
}

// gives a single shell command to execute on the nodes.
func (o RundeckJobCommandOutput) ShellCommand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RundeckJobCommand) *string { return v.ShellCommand }).(pulumi.StringPtrOutput)
}

func (o RundeckJobCommandOutput) StepPlugins() RundeckJobCommandStepPluginArrayOutput {
	return o.ApplyT(func(v RundeckJobCommand) []RundeckJobCommandStepPlugin { return v.StepPlugins }).(RundeckJobCommandStepPluginArrayOutput)
}

type RundeckJobCommandArrayOutput struct{ *pulumi.OutputState }

func (RundeckJobCommandArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RundeckJobCommand)(nil)).Elem()
}

func (o RundeckJobCommandArrayOutput) ToRundeckJobCommandArrayOutput() RundeckJobCommandArrayOutput {
	return o
}

func (o RundeckJobCommandArrayOutput) ToRundeckJobCommandArrayOutputWithContext(ctx context.Context) RundeckJobCommandArrayOutput {
	return o
}

func (o RundeckJobCommandArrayOutput) Index(i pulumi.IntInput) RundeckJobCommandOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RundeckJobCommand {
		return vs[0].([]RundeckJobCommand)[vs[1].(int)]
	}).(RundeckJobCommandOutput)
}

type RundeckJobCommandJob struct {
	Args *string `pulumi:"args"`
	// The name of a group within the project in which to place the job.
	// Setting this creates collapsable subcategories within the Rundeck UI's project job index.
	GroupName *string `pulumi:"groupName"`
	// The name of the job, used to describe the job in the Rundeck UI.
	Name           string                           `pulumi:"name"`
	Nodefilters    *RundeckJobCommandJobNodefilters `pulumi:"nodefilters"`
	RunForEachNode *bool                            `pulumi:"runForEachNode"`
}

// RundeckJobCommandJobInput is an input type that accepts RundeckJobCommandJobArgs and RundeckJobCommandJobOutput values.
// You can construct a concrete instance of `RundeckJobCommandJobInput` via:
//
//          RundeckJobCommandJobArgs{...}
type RundeckJobCommandJobInput interface {
	pulumi.Input

	ToRundeckJobCommandJobOutput() RundeckJobCommandJobOutput
	ToRundeckJobCommandJobOutputWithContext(context.Context) RundeckJobCommandJobOutput
}

type RundeckJobCommandJobArgs struct {
	Args pulumi.StringPtrInput `pulumi:"args"`
	// The name of a group within the project in which to place the job.
	// Setting this creates collapsable subcategories within the Rundeck UI's project job index.
	GroupName pulumi.StringPtrInput `pulumi:"groupName"`
	// The name of the job, used to describe the job in the Rundeck UI.
	Name           pulumi.StringInput                      `pulumi:"name"`
	Nodefilters    RundeckJobCommandJobNodefiltersPtrInput `pulumi:"nodefilters"`
	RunForEachNode pulumi.BoolPtrInput                     `pulumi:"runForEachNode"`
}

func (RundeckJobCommandJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RundeckJobCommandJob)(nil)).Elem()
}

func (i RundeckJobCommandJobArgs) ToRundeckJobCommandJobOutput() RundeckJobCommandJobOutput {
	return i.ToRundeckJobCommandJobOutputWithContext(context.Background())
}

func (i RundeckJobCommandJobArgs) ToRundeckJobCommandJobOutputWithContext(ctx context.Context) RundeckJobCommandJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RundeckJobCommandJobOutput)
}

// RundeckJobCommandJobArrayInput is an input type that accepts RundeckJobCommandJobArray and RundeckJobCommandJobArrayOutput values.
// You can construct a concrete instance of `RundeckJobCommandJobArrayInput` via:
//
//          RundeckJobCommandJobArray{ RundeckJobCommandJobArgs{...} }
type RundeckJobCommandJobArrayInput interface {
	pulumi.Input

	ToRundeckJobCommandJobArrayOutput() RundeckJobCommandJobArrayOutput
	ToRundeckJobCommandJobArrayOutputWithContext(context.Context) RundeckJobCommandJobArrayOutput
}

type RundeckJobCommandJobArray []RundeckJobCommandJobInput

func (RundeckJobCommandJobArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RundeckJobCommandJob)(nil)).Elem()
}

func (i RundeckJobCommandJobArray) ToRundeckJobCommandJobArrayOutput() RundeckJobCommandJobArrayOutput {
	return i.ToRundeckJobCommandJobArrayOutputWithContext(context.Background())
}

func (i RundeckJobCommandJobArray) ToRundeckJobCommandJobArrayOutputWithContext(ctx context.Context) RundeckJobCommandJobArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RundeckJobCommandJobArrayOutput)
}

type RundeckJobCommandJobOutput struct{ *pulumi.OutputState }

func (RundeckJobCommandJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RundeckJobCommandJob)(nil)).Elem()
}

func (o RundeckJobCommandJobOutput) ToRundeckJobCommandJobOutput() RundeckJobCommandJobOutput {
	return o
}

func (o RundeckJobCommandJobOutput) ToRundeckJobCommandJobOutputWithContext(ctx context.Context) RundeckJobCommandJobOutput {
	return o
}

func (o RundeckJobCommandJobOutput) Args() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RundeckJobCommandJob) *string { return v.Args }).(pulumi.StringPtrOutput)
}

// The name of a group within the project in which to place the job.
// Setting this creates collapsable subcategories within the Rundeck UI's project job index.
func (o RundeckJobCommandJobOutput) GroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RundeckJobCommandJob) *string { return v.GroupName }).(pulumi.StringPtrOutput)
}

// The name of the job, used to describe the job in the Rundeck UI.
func (o RundeckJobCommandJobOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RundeckJobCommandJob) string { return v.Name }).(pulumi.StringOutput)
}

func (o RundeckJobCommandJobOutput) Nodefilters() RundeckJobCommandJobNodefiltersPtrOutput {
	return o.ApplyT(func(v RundeckJobCommandJob) *RundeckJobCommandJobNodefilters { return v.Nodefilters }).(RundeckJobCommandJobNodefiltersPtrOutput)
}

func (o RundeckJobCommandJobOutput) RunForEachNode() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RundeckJobCommandJob) *bool { return v.RunForEachNode }).(pulumi.BoolPtrOutput)
}

type RundeckJobCommandJobArrayOutput struct{ *pulumi.OutputState }

func (RundeckJobCommandJobArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RundeckJobCommandJob)(nil)).Elem()
}

func (o RundeckJobCommandJobArrayOutput) ToRundeckJobCommandJobArrayOutput() RundeckJobCommandJobArrayOutput {
	return o
}

func (o RundeckJobCommandJobArrayOutput) ToRundeckJobCommandJobArrayOutputWithContext(ctx context.Context) RundeckJobCommandJobArrayOutput {
	return o
}

func (o RundeckJobCommandJobArrayOutput) Index(i pulumi.IntInput) RundeckJobCommandJobOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RundeckJobCommandJob {
		return vs[0].([]RundeckJobCommandJob)[vs[1].(int)]
	}).(RundeckJobCommandJobOutput)
}

type RundeckJobCommandJobNodefilters struct {
	Excludeprecedence *string `pulumi:"excludeprecedence"`
	Filter            *string `pulumi:"filter"`
}

// RundeckJobCommandJobNodefiltersInput is an input type that accepts RundeckJobCommandJobNodefiltersArgs and RundeckJobCommandJobNodefiltersOutput values.
// You can construct a concrete instance of `RundeckJobCommandJobNodefiltersInput` via:
//
//          RundeckJobCommandJobNodefiltersArgs{...}
type RundeckJobCommandJobNodefiltersInput interface {
	pulumi.Input

	ToRundeckJobCommandJobNodefiltersOutput() RundeckJobCommandJobNodefiltersOutput
	ToRundeckJobCommandJobNodefiltersOutputWithContext(context.Context) RundeckJobCommandJobNodefiltersOutput
}

type RundeckJobCommandJobNodefiltersArgs struct {
	Excludeprecedence pulumi.StringPtrInput `pulumi:"excludeprecedence"`
	Filter            pulumi.StringPtrInput `pulumi:"filter"`
}

func (RundeckJobCommandJobNodefiltersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RundeckJobCommandJobNodefilters)(nil)).Elem()
}

func (i RundeckJobCommandJobNodefiltersArgs) ToRundeckJobCommandJobNodefiltersOutput() RundeckJobCommandJobNodefiltersOutput {
	return i.ToRundeckJobCommandJobNodefiltersOutputWithContext(context.Background())
}

func (i RundeckJobCommandJobNodefiltersArgs) ToRundeckJobCommandJobNodefiltersOutputWithContext(ctx context.Context) RundeckJobCommandJobNodefiltersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RundeckJobCommandJobNodefiltersOutput)
}

func (i RundeckJobCommandJobNodefiltersArgs) ToRundeckJobCommandJobNodefiltersPtrOutput() RundeckJobCommandJobNodefiltersPtrOutput {
	return i.ToRundeckJobCommandJobNodefiltersPtrOutputWithContext(context.Background())
}

func (i RundeckJobCommandJobNodefiltersArgs) ToRundeckJobCommandJobNodefiltersPtrOutputWithContext(ctx context.Context) RundeckJobCommandJobNodefiltersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RundeckJobCommandJobNodefiltersOutput).ToRundeckJobCommandJobNodefiltersPtrOutputWithContext(ctx)
}

// RundeckJobCommandJobNodefiltersPtrInput is an input type that accepts RundeckJobCommandJobNodefiltersArgs, RundeckJobCommandJobNodefiltersPtr and RundeckJobCommandJobNodefiltersPtrOutput values.
// You can construct a concrete instance of `RundeckJobCommandJobNodefiltersPtrInput` via:
//
//          RundeckJobCommandJobNodefiltersArgs{...}
//
//  or:
//
//          nil
type RundeckJobCommandJobNodefiltersPtrInput interface {
	pulumi.Input

	ToRundeckJobCommandJobNodefiltersPtrOutput() RundeckJobCommandJobNodefiltersPtrOutput
	ToRundeckJobCommandJobNodefiltersPtrOutputWithContext(context.Context) RundeckJobCommandJobNodefiltersPtrOutput
}

type rundeckJobCommandJobNodefiltersPtrType RundeckJobCommandJobNodefiltersArgs

func RundeckJobCommandJobNodefiltersPtr(v *RundeckJobCommandJobNodefiltersArgs) RundeckJobCommandJobNodefiltersPtrInput {
	return (*rundeckJobCommandJobNodefiltersPtrType)(v)
}

func (*rundeckJobCommandJobNodefiltersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RundeckJobCommandJobNodefilters)(nil)).Elem()
}

func (i *rundeckJobCommandJobNodefiltersPtrType) ToRundeckJobCommandJobNodefiltersPtrOutput() RundeckJobCommandJobNodefiltersPtrOutput {
	return i.ToRundeckJobCommandJobNodefiltersPtrOutputWithContext(context.Background())
}

func (i *rundeckJobCommandJobNodefiltersPtrType) ToRundeckJobCommandJobNodefiltersPtrOutputWithContext(ctx context.Context) RundeckJobCommandJobNodefiltersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RundeckJobCommandJobNodefiltersPtrOutput)
}

type RundeckJobCommandJobNodefiltersOutput struct{ *pulumi.OutputState }

func (RundeckJobCommandJobNodefiltersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RundeckJobCommandJobNodefilters)(nil)).Elem()
}

func (o RundeckJobCommandJobNodefiltersOutput) ToRundeckJobCommandJobNodefiltersOutput() RundeckJobCommandJobNodefiltersOutput {
	return o
}

func (o RundeckJobCommandJobNodefiltersOutput) ToRundeckJobCommandJobNodefiltersOutputWithContext(ctx context.Context) RundeckJobCommandJobNodefiltersOutput {
	return o
}

func (o RundeckJobCommandJobNodefiltersOutput) ToRundeckJobCommandJobNodefiltersPtrOutput() RundeckJobCommandJobNodefiltersPtrOutput {
	return o.ToRundeckJobCommandJobNodefiltersPtrOutputWithContext(context.Background())
}

func (o RundeckJobCommandJobNodefiltersOutput) ToRundeckJobCommandJobNodefiltersPtrOutputWithContext(ctx context.Context) RundeckJobCommandJobNodefiltersPtrOutput {
	return o.ApplyT(func(v RundeckJobCommandJobNodefilters) *RundeckJobCommandJobNodefilters {
		return &v
	}).(RundeckJobCommandJobNodefiltersPtrOutput)
}
func (o RundeckJobCommandJobNodefiltersOutput) Excludeprecedence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RundeckJobCommandJobNodefilters) *string { return v.Excludeprecedence }).(pulumi.StringPtrOutput)
}

func (o RundeckJobCommandJobNodefiltersOutput) Filter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RundeckJobCommandJobNodefilters) *string { return v.Filter }).(pulumi.StringPtrOutput)
}

type RundeckJobCommandJobNodefiltersPtrOutput struct{ *pulumi.OutputState }

func (RundeckJobCommandJobNodefiltersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RundeckJobCommandJobNodefilters)(nil)).Elem()
}

func (o RundeckJobCommandJobNodefiltersPtrOutput) ToRundeckJobCommandJobNodefiltersPtrOutput() RundeckJobCommandJobNodefiltersPtrOutput {
	return o
}

func (o RundeckJobCommandJobNodefiltersPtrOutput) ToRundeckJobCommandJobNodefiltersPtrOutputWithContext(ctx context.Context) RundeckJobCommandJobNodefiltersPtrOutput {
	return o
}

func (o RundeckJobCommandJobNodefiltersPtrOutput) Elem() RundeckJobCommandJobNodefiltersOutput {
	return o.ApplyT(func(v *RundeckJobCommandJobNodefilters) RundeckJobCommandJobNodefilters { return *v }).(RundeckJobCommandJobNodefiltersOutput)
}

func (o RundeckJobCommandJobNodefiltersPtrOutput) Excludeprecedence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RundeckJobCommandJobNodefilters) *string {
		if v == nil {
			return nil
		}
		return v.Excludeprecedence
	}).(pulumi.StringPtrOutput)
}

func (o RundeckJobCommandJobNodefiltersPtrOutput) Filter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RundeckJobCommandJobNodefilters) *string {
		if v == nil {
			return nil
		}
		return v.Filter
	}).(pulumi.StringPtrOutput)
}

type RundeckJobCommandNodeStepPlugin struct {
	// Map of arbitrary configuration properties for the selected plugin.
	Config map[string]interface{} `pulumi:"config"`
	// The name of the plugin to use.
	Type string `pulumi:"type"`
}

// RundeckJobCommandNodeStepPluginInput is an input type that accepts RundeckJobCommandNodeStepPluginArgs and RundeckJobCommandNodeStepPluginOutput values.
// You can construct a concrete instance of `RundeckJobCommandNodeStepPluginInput` via:
//
//          RundeckJobCommandNodeStepPluginArgs{...}
type RundeckJobCommandNodeStepPluginInput interface {
	pulumi.Input

	ToRundeckJobCommandNodeStepPluginOutput() RundeckJobCommandNodeStepPluginOutput
	ToRundeckJobCommandNodeStepPluginOutputWithContext(context.Context) RundeckJobCommandNodeStepPluginOutput
}

type RundeckJobCommandNodeStepPluginArgs struct {
	// Map of arbitrary configuration properties for the selected plugin.
	Config pulumi.MapInput `pulumi:"config"`
	// The name of the plugin to use.
	Type pulumi.StringInput `pulumi:"type"`
}

func (RundeckJobCommandNodeStepPluginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RundeckJobCommandNodeStepPlugin)(nil)).Elem()
}

func (i RundeckJobCommandNodeStepPluginArgs) ToRundeckJobCommandNodeStepPluginOutput() RundeckJobCommandNodeStepPluginOutput {
	return i.ToRundeckJobCommandNodeStepPluginOutputWithContext(context.Background())
}

func (i RundeckJobCommandNodeStepPluginArgs) ToRundeckJobCommandNodeStepPluginOutputWithContext(ctx context.Context) RundeckJobCommandNodeStepPluginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RundeckJobCommandNodeStepPluginOutput)
}

// RundeckJobCommandNodeStepPluginArrayInput is an input type that accepts RundeckJobCommandNodeStepPluginArray and RundeckJobCommandNodeStepPluginArrayOutput values.
// You can construct a concrete instance of `RundeckJobCommandNodeStepPluginArrayInput` via:
//
//          RundeckJobCommandNodeStepPluginArray{ RundeckJobCommandNodeStepPluginArgs{...} }
type RundeckJobCommandNodeStepPluginArrayInput interface {
	pulumi.Input

	ToRundeckJobCommandNodeStepPluginArrayOutput() RundeckJobCommandNodeStepPluginArrayOutput
	ToRundeckJobCommandNodeStepPluginArrayOutputWithContext(context.Context) RundeckJobCommandNodeStepPluginArrayOutput
}

type RundeckJobCommandNodeStepPluginArray []RundeckJobCommandNodeStepPluginInput

func (RundeckJobCommandNodeStepPluginArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RundeckJobCommandNodeStepPlugin)(nil)).Elem()
}

func (i RundeckJobCommandNodeStepPluginArray) ToRundeckJobCommandNodeStepPluginArrayOutput() RundeckJobCommandNodeStepPluginArrayOutput {
	return i.ToRundeckJobCommandNodeStepPluginArrayOutputWithContext(context.Background())
}

func (i RundeckJobCommandNodeStepPluginArray) ToRundeckJobCommandNodeStepPluginArrayOutputWithContext(ctx context.Context) RundeckJobCommandNodeStepPluginArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RundeckJobCommandNodeStepPluginArrayOutput)
}

type RundeckJobCommandNodeStepPluginOutput struct{ *pulumi.OutputState }

func (RundeckJobCommandNodeStepPluginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RundeckJobCommandNodeStepPlugin)(nil)).Elem()
}

func (o RundeckJobCommandNodeStepPluginOutput) ToRundeckJobCommandNodeStepPluginOutput() RundeckJobCommandNodeStepPluginOutput {
	return o
}

func (o RundeckJobCommandNodeStepPluginOutput) ToRundeckJobCommandNodeStepPluginOutputWithContext(ctx context.Context) RundeckJobCommandNodeStepPluginOutput {
	return o
}

// Map of arbitrary configuration properties for the selected plugin.
func (o RundeckJobCommandNodeStepPluginOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v RundeckJobCommandNodeStepPlugin) map[string]interface{} { return v.Config }).(pulumi.MapOutput)
}

// The name of the plugin to use.
func (o RundeckJobCommandNodeStepPluginOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RundeckJobCommandNodeStepPlugin) string { return v.Type }).(pulumi.StringOutput)
}

type RundeckJobCommandNodeStepPluginArrayOutput struct{ *pulumi.OutputState }

func (RundeckJobCommandNodeStepPluginArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RundeckJobCommandNodeStepPlugin)(nil)).Elem()
}

func (o RundeckJobCommandNodeStepPluginArrayOutput) ToRundeckJobCommandNodeStepPluginArrayOutput() RundeckJobCommandNodeStepPluginArrayOutput {
	return o
}

func (o RundeckJobCommandNodeStepPluginArrayOutput) ToRundeckJobCommandNodeStepPluginArrayOutputWithContext(ctx context.Context) RundeckJobCommandNodeStepPluginArrayOutput {
	return o
}

func (o RundeckJobCommandNodeStepPluginArrayOutput) Index(i pulumi.IntInput) RundeckJobCommandNodeStepPluginOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RundeckJobCommandNodeStepPlugin {
		return vs[0].([]RundeckJobCommandNodeStepPlugin)[vs[1].(int)]
	}).(RundeckJobCommandNodeStepPluginOutput)
}

type RundeckJobCommandStepPlugin struct {
	// Map of arbitrary configuration properties for the selected plugin.
	Config map[string]interface{} `pulumi:"config"`
	// The name of the plugin to use.
	Type string `pulumi:"type"`
}

// RundeckJobCommandStepPluginInput is an input type that accepts RundeckJobCommandStepPluginArgs and RundeckJobCommandStepPluginOutput values.
// You can construct a concrete instance of `RundeckJobCommandStepPluginInput` via:
//
//          RundeckJobCommandStepPluginArgs{...}
type RundeckJobCommandStepPluginInput interface {
	pulumi.Input

	ToRundeckJobCommandStepPluginOutput() RundeckJobCommandStepPluginOutput
	ToRundeckJobCommandStepPluginOutputWithContext(context.Context) RundeckJobCommandStepPluginOutput
}

type RundeckJobCommandStepPluginArgs struct {
	// Map of arbitrary configuration properties for the selected plugin.
	Config pulumi.MapInput `pulumi:"config"`
	// The name of the plugin to use.
	Type pulumi.StringInput `pulumi:"type"`
}

func (RundeckJobCommandStepPluginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RundeckJobCommandStepPlugin)(nil)).Elem()
}

func (i RundeckJobCommandStepPluginArgs) ToRundeckJobCommandStepPluginOutput() RundeckJobCommandStepPluginOutput {
	return i.ToRundeckJobCommandStepPluginOutputWithContext(context.Background())
}

func (i RundeckJobCommandStepPluginArgs) ToRundeckJobCommandStepPluginOutputWithContext(ctx context.Context) RundeckJobCommandStepPluginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RundeckJobCommandStepPluginOutput)
}

// RundeckJobCommandStepPluginArrayInput is an input type that accepts RundeckJobCommandStepPluginArray and RundeckJobCommandStepPluginArrayOutput values.
// You can construct a concrete instance of `RundeckJobCommandStepPluginArrayInput` via:
//
//          RundeckJobCommandStepPluginArray{ RundeckJobCommandStepPluginArgs{...} }
type RundeckJobCommandStepPluginArrayInput interface {
	pulumi.Input

	ToRundeckJobCommandStepPluginArrayOutput() RundeckJobCommandStepPluginArrayOutput
	ToRundeckJobCommandStepPluginArrayOutputWithContext(context.Context) RundeckJobCommandStepPluginArrayOutput
}

type RundeckJobCommandStepPluginArray []RundeckJobCommandStepPluginInput

func (RundeckJobCommandStepPluginArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RundeckJobCommandStepPlugin)(nil)).Elem()
}

func (i RundeckJobCommandStepPluginArray) ToRundeckJobCommandStepPluginArrayOutput() RundeckJobCommandStepPluginArrayOutput {
	return i.ToRundeckJobCommandStepPluginArrayOutputWithContext(context.Background())
}

func (i RundeckJobCommandStepPluginArray) ToRundeckJobCommandStepPluginArrayOutputWithContext(ctx context.Context) RundeckJobCommandStepPluginArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RundeckJobCommandStepPluginArrayOutput)
}

type RundeckJobCommandStepPluginOutput struct{ *pulumi.OutputState }

func (RundeckJobCommandStepPluginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RundeckJobCommandStepPlugin)(nil)).Elem()
}

func (o RundeckJobCommandStepPluginOutput) ToRundeckJobCommandStepPluginOutput() RundeckJobCommandStepPluginOutput {
	return o
}

func (o RundeckJobCommandStepPluginOutput) ToRundeckJobCommandStepPluginOutputWithContext(ctx context.Context) RundeckJobCommandStepPluginOutput {
	return o
}

// Map of arbitrary configuration properties for the selected plugin.
func (o RundeckJobCommandStepPluginOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v RundeckJobCommandStepPlugin) map[string]interface{} { return v.Config }).(pulumi.MapOutput)
}

// The name of the plugin to use.
func (o RundeckJobCommandStepPluginOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RundeckJobCommandStepPlugin) string { return v.Type }).(pulumi.StringOutput)
}

type RundeckJobCommandStepPluginArrayOutput struct{ *pulumi.OutputState }

func (RundeckJobCommandStepPluginArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RundeckJobCommandStepPlugin)(nil)).Elem()
}

func (o RundeckJobCommandStepPluginArrayOutput) ToRundeckJobCommandStepPluginArrayOutput() RundeckJobCommandStepPluginArrayOutput {
	return o
}

func (o RundeckJobCommandStepPluginArrayOutput) ToRundeckJobCommandStepPluginArrayOutputWithContext(ctx context.Context) RundeckJobCommandStepPluginArrayOutput {
	return o
}

func (o RundeckJobCommandStepPluginArrayOutput) Index(i pulumi.IntInput) RundeckJobCommandStepPluginOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RundeckJobCommandStepPlugin {
		return vs[0].([]RundeckJobCommandStepPlugin)[vs[1].(int)]
	}).(RundeckJobCommandStepPluginOutput)
}

type RundeckJobNotification struct {
	Emails  []RundeckJobNotificationEmail  `pulumi:"emails"`
	Plugins []RundeckJobNotificationPlugin `pulumi:"plugins"`
	// The name of the plugin to use.
	Type        string   `pulumi:"type"`
	WebhookUrls []string `pulumi:"webhookUrls"`
}

// RundeckJobNotificationInput is an input type that accepts RundeckJobNotificationArgs and RundeckJobNotificationOutput values.
// You can construct a concrete instance of `RundeckJobNotificationInput` via:
//
//          RundeckJobNotificationArgs{...}
type RundeckJobNotificationInput interface {
	pulumi.Input

	ToRundeckJobNotificationOutput() RundeckJobNotificationOutput
	ToRundeckJobNotificationOutputWithContext(context.Context) RundeckJobNotificationOutput
}

type RundeckJobNotificationArgs struct {
	Emails  RundeckJobNotificationEmailArrayInput  `pulumi:"emails"`
	Plugins RundeckJobNotificationPluginArrayInput `pulumi:"plugins"`
	// The name of the plugin to use.
	Type        pulumi.StringInput      `pulumi:"type"`
	WebhookUrls pulumi.StringArrayInput `pulumi:"webhookUrls"`
}

func (RundeckJobNotificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RundeckJobNotification)(nil)).Elem()
}

func (i RundeckJobNotificationArgs) ToRundeckJobNotificationOutput() RundeckJobNotificationOutput {
	return i.ToRundeckJobNotificationOutputWithContext(context.Background())
}

func (i RundeckJobNotificationArgs) ToRundeckJobNotificationOutputWithContext(ctx context.Context) RundeckJobNotificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RundeckJobNotificationOutput)
}

// RundeckJobNotificationArrayInput is an input type that accepts RundeckJobNotificationArray and RundeckJobNotificationArrayOutput values.
// You can construct a concrete instance of `RundeckJobNotificationArrayInput` via:
//
//          RundeckJobNotificationArray{ RundeckJobNotificationArgs{...} }
type RundeckJobNotificationArrayInput interface {
	pulumi.Input

	ToRundeckJobNotificationArrayOutput() RundeckJobNotificationArrayOutput
	ToRundeckJobNotificationArrayOutputWithContext(context.Context) RundeckJobNotificationArrayOutput
}

type RundeckJobNotificationArray []RundeckJobNotificationInput

func (RundeckJobNotificationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RundeckJobNotification)(nil)).Elem()
}

func (i RundeckJobNotificationArray) ToRundeckJobNotificationArrayOutput() RundeckJobNotificationArrayOutput {
	return i.ToRundeckJobNotificationArrayOutputWithContext(context.Background())
}

func (i RundeckJobNotificationArray) ToRundeckJobNotificationArrayOutputWithContext(ctx context.Context) RundeckJobNotificationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RundeckJobNotificationArrayOutput)
}

type RundeckJobNotificationOutput struct{ *pulumi.OutputState }

func (RundeckJobNotificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RundeckJobNotification)(nil)).Elem()
}

func (o RundeckJobNotificationOutput) ToRundeckJobNotificationOutput() RundeckJobNotificationOutput {
	return o
}

func (o RundeckJobNotificationOutput) ToRundeckJobNotificationOutputWithContext(ctx context.Context) RundeckJobNotificationOutput {
	return o
}

func (o RundeckJobNotificationOutput) Emails() RundeckJobNotificationEmailArrayOutput {
	return o.ApplyT(func(v RundeckJobNotification) []RundeckJobNotificationEmail { return v.Emails }).(RundeckJobNotificationEmailArrayOutput)
}

func (o RundeckJobNotificationOutput) Plugins() RundeckJobNotificationPluginArrayOutput {
	return o.ApplyT(func(v RundeckJobNotification) []RundeckJobNotificationPlugin { return v.Plugins }).(RundeckJobNotificationPluginArrayOutput)
}

// The name of the plugin to use.
func (o RundeckJobNotificationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RundeckJobNotification) string { return v.Type }).(pulumi.StringOutput)
}

func (o RundeckJobNotificationOutput) WebhookUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RundeckJobNotification) []string { return v.WebhookUrls }).(pulumi.StringArrayOutput)
}

type RundeckJobNotificationArrayOutput struct{ *pulumi.OutputState }

func (RundeckJobNotificationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RundeckJobNotification)(nil)).Elem()
}

func (o RundeckJobNotificationArrayOutput) ToRundeckJobNotificationArrayOutput() RundeckJobNotificationArrayOutput {
	return o
}

func (o RundeckJobNotificationArrayOutput) ToRundeckJobNotificationArrayOutputWithContext(ctx context.Context) RundeckJobNotificationArrayOutput {
	return o
}

func (o RundeckJobNotificationArrayOutput) Index(i pulumi.IntInput) RundeckJobNotificationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RundeckJobNotification {
		return vs[0].([]RundeckJobNotification)[vs[1].(int)]
	}).(RundeckJobNotificationOutput)
}

type RundeckJobNotificationEmail struct {
	AttachLog  *bool    `pulumi:"attachLog"`
	Recipients []string `pulumi:"recipients"`
	Subject    *string  `pulumi:"subject"`
}

// RundeckJobNotificationEmailInput is an input type that accepts RundeckJobNotificationEmailArgs and RundeckJobNotificationEmailOutput values.
// You can construct a concrete instance of `RundeckJobNotificationEmailInput` via:
//
//          RundeckJobNotificationEmailArgs{...}
type RundeckJobNotificationEmailInput interface {
	pulumi.Input

	ToRundeckJobNotificationEmailOutput() RundeckJobNotificationEmailOutput
	ToRundeckJobNotificationEmailOutputWithContext(context.Context) RundeckJobNotificationEmailOutput
}

type RundeckJobNotificationEmailArgs struct {
	AttachLog  pulumi.BoolPtrInput     `pulumi:"attachLog"`
	Recipients pulumi.StringArrayInput `pulumi:"recipients"`
	Subject    pulumi.StringPtrInput   `pulumi:"subject"`
}

func (RundeckJobNotificationEmailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RundeckJobNotificationEmail)(nil)).Elem()
}

func (i RundeckJobNotificationEmailArgs) ToRundeckJobNotificationEmailOutput() RundeckJobNotificationEmailOutput {
	return i.ToRundeckJobNotificationEmailOutputWithContext(context.Background())
}

func (i RundeckJobNotificationEmailArgs) ToRundeckJobNotificationEmailOutputWithContext(ctx context.Context) RundeckJobNotificationEmailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RundeckJobNotificationEmailOutput)
}

// RundeckJobNotificationEmailArrayInput is an input type that accepts RundeckJobNotificationEmailArray and RundeckJobNotificationEmailArrayOutput values.
// You can construct a concrete instance of `RundeckJobNotificationEmailArrayInput` via:
//
//          RundeckJobNotificationEmailArray{ RundeckJobNotificationEmailArgs{...} }
type RundeckJobNotificationEmailArrayInput interface {
	pulumi.Input

	ToRundeckJobNotificationEmailArrayOutput() RundeckJobNotificationEmailArrayOutput
	ToRundeckJobNotificationEmailArrayOutputWithContext(context.Context) RundeckJobNotificationEmailArrayOutput
}

type RundeckJobNotificationEmailArray []RundeckJobNotificationEmailInput

func (RundeckJobNotificationEmailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RundeckJobNotificationEmail)(nil)).Elem()
}

func (i RundeckJobNotificationEmailArray) ToRundeckJobNotificationEmailArrayOutput() RundeckJobNotificationEmailArrayOutput {
	return i.ToRundeckJobNotificationEmailArrayOutputWithContext(context.Background())
}

func (i RundeckJobNotificationEmailArray) ToRundeckJobNotificationEmailArrayOutputWithContext(ctx context.Context) RundeckJobNotificationEmailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RundeckJobNotificationEmailArrayOutput)
}

type RundeckJobNotificationEmailOutput struct{ *pulumi.OutputState }

func (RundeckJobNotificationEmailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RundeckJobNotificationEmail)(nil)).Elem()
}

func (o RundeckJobNotificationEmailOutput) ToRundeckJobNotificationEmailOutput() RundeckJobNotificationEmailOutput {
	return o
}

func (o RundeckJobNotificationEmailOutput) ToRundeckJobNotificationEmailOutputWithContext(ctx context.Context) RundeckJobNotificationEmailOutput {
	return o
}

func (o RundeckJobNotificationEmailOutput) AttachLog() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RundeckJobNotificationEmail) *bool { return v.AttachLog }).(pulumi.BoolPtrOutput)
}

func (o RundeckJobNotificationEmailOutput) Recipients() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RundeckJobNotificationEmail) []string { return v.Recipients }).(pulumi.StringArrayOutput)
}

func (o RundeckJobNotificationEmailOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RundeckJobNotificationEmail) *string { return v.Subject }).(pulumi.StringPtrOutput)
}

type RundeckJobNotificationEmailArrayOutput struct{ *pulumi.OutputState }

func (RundeckJobNotificationEmailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RundeckJobNotificationEmail)(nil)).Elem()
}

func (o RundeckJobNotificationEmailArrayOutput) ToRundeckJobNotificationEmailArrayOutput() RundeckJobNotificationEmailArrayOutput {
	return o
}

func (o RundeckJobNotificationEmailArrayOutput) ToRundeckJobNotificationEmailArrayOutputWithContext(ctx context.Context) RundeckJobNotificationEmailArrayOutput {
	return o
}

func (o RundeckJobNotificationEmailArrayOutput) Index(i pulumi.IntInput) RundeckJobNotificationEmailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RundeckJobNotificationEmail {
		return vs[0].([]RundeckJobNotificationEmail)[vs[1].(int)]
	}).(RundeckJobNotificationEmailOutput)
}

type RundeckJobNotificationPlugin struct {
	// Map of arbitrary configuration properties for the selected plugin.
	Config map[string]interface{} `pulumi:"config"`
	// The name of the plugin to use.
	Type string `pulumi:"type"`
}

// RundeckJobNotificationPluginInput is an input type that accepts RundeckJobNotificationPluginArgs and RundeckJobNotificationPluginOutput values.
// You can construct a concrete instance of `RundeckJobNotificationPluginInput` via:
//
//          RundeckJobNotificationPluginArgs{...}
type RundeckJobNotificationPluginInput interface {
	pulumi.Input

	ToRundeckJobNotificationPluginOutput() RundeckJobNotificationPluginOutput
	ToRundeckJobNotificationPluginOutputWithContext(context.Context) RundeckJobNotificationPluginOutput
}

type RundeckJobNotificationPluginArgs struct {
	// Map of arbitrary configuration properties for the selected plugin.
	Config pulumi.MapInput `pulumi:"config"`
	// The name of the plugin to use.
	Type pulumi.StringInput `pulumi:"type"`
}

func (RundeckJobNotificationPluginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RundeckJobNotificationPlugin)(nil)).Elem()
}

func (i RundeckJobNotificationPluginArgs) ToRundeckJobNotificationPluginOutput() RundeckJobNotificationPluginOutput {
	return i.ToRundeckJobNotificationPluginOutputWithContext(context.Background())
}

func (i RundeckJobNotificationPluginArgs) ToRundeckJobNotificationPluginOutputWithContext(ctx context.Context) RundeckJobNotificationPluginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RundeckJobNotificationPluginOutput)
}

// RundeckJobNotificationPluginArrayInput is an input type that accepts RundeckJobNotificationPluginArray and RundeckJobNotificationPluginArrayOutput values.
// You can construct a concrete instance of `RundeckJobNotificationPluginArrayInput` via:
//
//          RundeckJobNotificationPluginArray{ RundeckJobNotificationPluginArgs{...} }
type RundeckJobNotificationPluginArrayInput interface {
	pulumi.Input

	ToRundeckJobNotificationPluginArrayOutput() RundeckJobNotificationPluginArrayOutput
	ToRundeckJobNotificationPluginArrayOutputWithContext(context.Context) RundeckJobNotificationPluginArrayOutput
}

type RundeckJobNotificationPluginArray []RundeckJobNotificationPluginInput

func (RundeckJobNotificationPluginArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RundeckJobNotificationPlugin)(nil)).Elem()
}

func (i RundeckJobNotificationPluginArray) ToRundeckJobNotificationPluginArrayOutput() RundeckJobNotificationPluginArrayOutput {
	return i.ToRundeckJobNotificationPluginArrayOutputWithContext(context.Background())
}

func (i RundeckJobNotificationPluginArray) ToRundeckJobNotificationPluginArrayOutputWithContext(ctx context.Context) RundeckJobNotificationPluginArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RundeckJobNotificationPluginArrayOutput)
}

type RundeckJobNotificationPluginOutput struct{ *pulumi.OutputState }

func (RundeckJobNotificationPluginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RundeckJobNotificationPlugin)(nil)).Elem()
}

func (o RundeckJobNotificationPluginOutput) ToRundeckJobNotificationPluginOutput() RundeckJobNotificationPluginOutput {
	return o
}

func (o RundeckJobNotificationPluginOutput) ToRundeckJobNotificationPluginOutputWithContext(ctx context.Context) RundeckJobNotificationPluginOutput {
	return o
}

// Map of arbitrary configuration properties for the selected plugin.
func (o RundeckJobNotificationPluginOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v RundeckJobNotificationPlugin) map[string]interface{} { return v.Config }).(pulumi.MapOutput)
}

// The name of the plugin to use.
func (o RundeckJobNotificationPluginOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RundeckJobNotificationPlugin) string { return v.Type }).(pulumi.StringOutput)
}

type RundeckJobNotificationPluginArrayOutput struct{ *pulumi.OutputState }

func (RundeckJobNotificationPluginArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RundeckJobNotificationPlugin)(nil)).Elem()
}

func (o RundeckJobNotificationPluginArrayOutput) ToRundeckJobNotificationPluginArrayOutput() RundeckJobNotificationPluginArrayOutput {
	return o
}

func (o RundeckJobNotificationPluginArrayOutput) ToRundeckJobNotificationPluginArrayOutputWithContext(ctx context.Context) RundeckJobNotificationPluginArrayOutput {
	return o
}

func (o RundeckJobNotificationPluginArrayOutput) Index(i pulumi.IntInput) RundeckJobNotificationPluginOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RundeckJobNotificationPlugin {
		return vs[0].([]RundeckJobNotificationPlugin)[vs[1].(int)]
	}).(RundeckJobNotificationPluginOutput)
}

type RundeckJobOption struct {
	AllowMultipleValues *bool   `pulumi:"allowMultipleValues"`
	DefaultValue        *string `pulumi:"defaultValue"`
	// A longer description of the job, describing the job in the Rundeck UI.
	Description         *string `pulumi:"description"`
	ExposedToScripts    *bool   `pulumi:"exposedToScripts"`
	MultiValueDelimiter *string `pulumi:"multiValueDelimiter"`
	// The name of the job, used to describe the job in the Rundeck UI.
	Name                    string   `pulumi:"name"`
	ObscureInput            *bool    `pulumi:"obscureInput"`
	RequirePredefinedChoice *bool    `pulumi:"requirePredefinedChoice"`
	Required                *bool    `pulumi:"required"`
	ValidationRegex         *string  `pulumi:"validationRegex"`
	ValueChoices            []string `pulumi:"valueChoices"`
	ValueChoicesUrl         *string  `pulumi:"valueChoicesUrl"`
}

// RundeckJobOptionInput is an input type that accepts RundeckJobOptionArgs and RundeckJobOptionOutput values.
// You can construct a concrete instance of `RundeckJobOptionInput` via:
//
//          RundeckJobOptionArgs{...}
type RundeckJobOptionInput interface {
	pulumi.Input

	ToRundeckJobOptionOutput() RundeckJobOptionOutput
	ToRundeckJobOptionOutputWithContext(context.Context) RundeckJobOptionOutput
}

type RundeckJobOptionArgs struct {
	AllowMultipleValues pulumi.BoolPtrInput   `pulumi:"allowMultipleValues"`
	DefaultValue        pulumi.StringPtrInput `pulumi:"defaultValue"`
	// A longer description of the job, describing the job in the Rundeck UI.
	Description         pulumi.StringPtrInput `pulumi:"description"`
	ExposedToScripts    pulumi.BoolPtrInput   `pulumi:"exposedToScripts"`
	MultiValueDelimiter pulumi.StringPtrInput `pulumi:"multiValueDelimiter"`
	// The name of the job, used to describe the job in the Rundeck UI.
	Name                    pulumi.StringInput      `pulumi:"name"`
	ObscureInput            pulumi.BoolPtrInput     `pulumi:"obscureInput"`
	RequirePredefinedChoice pulumi.BoolPtrInput     `pulumi:"requirePredefinedChoice"`
	Required                pulumi.BoolPtrInput     `pulumi:"required"`
	ValidationRegex         pulumi.StringPtrInput   `pulumi:"validationRegex"`
	ValueChoices            pulumi.StringArrayInput `pulumi:"valueChoices"`
	ValueChoicesUrl         pulumi.StringPtrInput   `pulumi:"valueChoicesUrl"`
}

func (RundeckJobOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RundeckJobOption)(nil)).Elem()
}

func (i RundeckJobOptionArgs) ToRundeckJobOptionOutput() RundeckJobOptionOutput {
	return i.ToRundeckJobOptionOutputWithContext(context.Background())
}

func (i RundeckJobOptionArgs) ToRundeckJobOptionOutputWithContext(ctx context.Context) RundeckJobOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RundeckJobOptionOutput)
}

// RundeckJobOptionArrayInput is an input type that accepts RundeckJobOptionArray and RundeckJobOptionArrayOutput values.
// You can construct a concrete instance of `RundeckJobOptionArrayInput` via:
//
//          RundeckJobOptionArray{ RundeckJobOptionArgs{...} }
type RundeckJobOptionArrayInput interface {
	pulumi.Input

	ToRundeckJobOptionArrayOutput() RundeckJobOptionArrayOutput
	ToRundeckJobOptionArrayOutputWithContext(context.Context) RundeckJobOptionArrayOutput
}

type RundeckJobOptionArray []RundeckJobOptionInput

func (RundeckJobOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RundeckJobOption)(nil)).Elem()
}

func (i RundeckJobOptionArray) ToRundeckJobOptionArrayOutput() RundeckJobOptionArrayOutput {
	return i.ToRundeckJobOptionArrayOutputWithContext(context.Background())
}

func (i RundeckJobOptionArray) ToRundeckJobOptionArrayOutputWithContext(ctx context.Context) RundeckJobOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RundeckJobOptionArrayOutput)
}

type RundeckJobOptionOutput struct{ *pulumi.OutputState }

func (RundeckJobOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RundeckJobOption)(nil)).Elem()
}

func (o RundeckJobOptionOutput) ToRundeckJobOptionOutput() RundeckJobOptionOutput {
	return o
}

func (o RundeckJobOptionOutput) ToRundeckJobOptionOutputWithContext(ctx context.Context) RundeckJobOptionOutput {
	return o
}

func (o RundeckJobOptionOutput) AllowMultipleValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RundeckJobOption) *bool { return v.AllowMultipleValues }).(pulumi.BoolPtrOutput)
}

func (o RundeckJobOptionOutput) DefaultValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RundeckJobOption) *string { return v.DefaultValue }).(pulumi.StringPtrOutput)
}

// A longer description of the job, describing the job in the Rundeck UI.
func (o RundeckJobOptionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RundeckJobOption) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o RundeckJobOptionOutput) ExposedToScripts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RundeckJobOption) *bool { return v.ExposedToScripts }).(pulumi.BoolPtrOutput)
}

func (o RundeckJobOptionOutput) MultiValueDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RundeckJobOption) *string { return v.MultiValueDelimiter }).(pulumi.StringPtrOutput)
}

// The name of the job, used to describe the job in the Rundeck UI.
func (o RundeckJobOptionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RundeckJobOption) string { return v.Name }).(pulumi.StringOutput)
}

func (o RundeckJobOptionOutput) ObscureInput() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RundeckJobOption) *bool { return v.ObscureInput }).(pulumi.BoolPtrOutput)
}

func (o RundeckJobOptionOutput) RequirePredefinedChoice() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RundeckJobOption) *bool { return v.RequirePredefinedChoice }).(pulumi.BoolPtrOutput)
}

func (o RundeckJobOptionOutput) Required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RundeckJobOption) *bool { return v.Required }).(pulumi.BoolPtrOutput)
}

func (o RundeckJobOptionOutput) ValidationRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RundeckJobOption) *string { return v.ValidationRegex }).(pulumi.StringPtrOutput)
}

func (o RundeckJobOptionOutput) ValueChoices() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RundeckJobOption) []string { return v.ValueChoices }).(pulumi.StringArrayOutput)
}

func (o RundeckJobOptionOutput) ValueChoicesUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RundeckJobOption) *string { return v.ValueChoicesUrl }).(pulumi.StringPtrOutput)
}

type RundeckJobOptionArrayOutput struct{ *pulumi.OutputState }

func (RundeckJobOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RundeckJobOption)(nil)).Elem()
}

func (o RundeckJobOptionArrayOutput) ToRundeckJobOptionArrayOutput() RundeckJobOptionArrayOutput {
	return o
}

func (o RundeckJobOptionArrayOutput) ToRundeckJobOptionArrayOutputWithContext(ctx context.Context) RundeckJobOptionArrayOutput {
	return o
}

func (o RundeckJobOptionArrayOutput) Index(i pulumi.IntInput) RundeckJobOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RundeckJobOption {
		return vs[0].([]RundeckJobOption)[vs[1].(int)]
	}).(RundeckJobOptionOutput)
}

type RundeckProjectResourceModelSource struct {
	// Map of arbitrary configuration properties for the selected resource model
	// plugin.
	Config map[string]interface{} `pulumi:"config"`
	// The name of the resource model plugin to use.
	Type string `pulumi:"type"`
}

// RundeckProjectResourceModelSourceInput is an input type that accepts RundeckProjectResourceModelSourceArgs and RundeckProjectResourceModelSourceOutput values.
// You can construct a concrete instance of `RundeckProjectResourceModelSourceInput` via:
//
//          RundeckProjectResourceModelSourceArgs{...}
type RundeckProjectResourceModelSourceInput interface {
	pulumi.Input

	ToRundeckProjectResourceModelSourceOutput() RundeckProjectResourceModelSourceOutput
	ToRundeckProjectResourceModelSourceOutputWithContext(context.Context) RundeckProjectResourceModelSourceOutput
}

type RundeckProjectResourceModelSourceArgs struct {
	// Map of arbitrary configuration properties for the selected resource model
	// plugin.
	Config pulumi.MapInput `pulumi:"config"`
	// The name of the resource model plugin to use.
	Type pulumi.StringInput `pulumi:"type"`
}

func (RundeckProjectResourceModelSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RundeckProjectResourceModelSource)(nil)).Elem()
}

func (i RundeckProjectResourceModelSourceArgs) ToRundeckProjectResourceModelSourceOutput() RundeckProjectResourceModelSourceOutput {
	return i.ToRundeckProjectResourceModelSourceOutputWithContext(context.Background())
}

func (i RundeckProjectResourceModelSourceArgs) ToRundeckProjectResourceModelSourceOutputWithContext(ctx context.Context) RundeckProjectResourceModelSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RundeckProjectResourceModelSourceOutput)
}

// RundeckProjectResourceModelSourceArrayInput is an input type that accepts RundeckProjectResourceModelSourceArray and RundeckProjectResourceModelSourceArrayOutput values.
// You can construct a concrete instance of `RundeckProjectResourceModelSourceArrayInput` via:
//
//          RundeckProjectResourceModelSourceArray{ RundeckProjectResourceModelSourceArgs{...} }
type RundeckProjectResourceModelSourceArrayInput interface {
	pulumi.Input

	ToRundeckProjectResourceModelSourceArrayOutput() RundeckProjectResourceModelSourceArrayOutput
	ToRundeckProjectResourceModelSourceArrayOutputWithContext(context.Context) RundeckProjectResourceModelSourceArrayOutput
}

type RundeckProjectResourceModelSourceArray []RundeckProjectResourceModelSourceInput

func (RundeckProjectResourceModelSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RundeckProjectResourceModelSource)(nil)).Elem()
}

func (i RundeckProjectResourceModelSourceArray) ToRundeckProjectResourceModelSourceArrayOutput() RundeckProjectResourceModelSourceArrayOutput {
	return i.ToRundeckProjectResourceModelSourceArrayOutputWithContext(context.Background())
}

func (i RundeckProjectResourceModelSourceArray) ToRundeckProjectResourceModelSourceArrayOutputWithContext(ctx context.Context) RundeckProjectResourceModelSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RundeckProjectResourceModelSourceArrayOutput)
}

type RundeckProjectResourceModelSourceOutput struct{ *pulumi.OutputState }

func (RundeckProjectResourceModelSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RundeckProjectResourceModelSource)(nil)).Elem()
}

func (o RundeckProjectResourceModelSourceOutput) ToRundeckProjectResourceModelSourceOutput() RundeckProjectResourceModelSourceOutput {
	return o
}

func (o RundeckProjectResourceModelSourceOutput) ToRundeckProjectResourceModelSourceOutputWithContext(ctx context.Context) RundeckProjectResourceModelSourceOutput {
	return o
}

// Map of arbitrary configuration properties for the selected resource model
// plugin.
func (o RundeckProjectResourceModelSourceOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v RundeckProjectResourceModelSource) map[string]interface{} { return v.Config }).(pulumi.MapOutput)
}

// The name of the resource model plugin to use.
func (o RundeckProjectResourceModelSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RundeckProjectResourceModelSource) string { return v.Type }).(pulumi.StringOutput)
}

type RundeckProjectResourceModelSourceArrayOutput struct{ *pulumi.OutputState }

func (RundeckProjectResourceModelSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RundeckProjectResourceModelSource)(nil)).Elem()
}

func (o RundeckProjectResourceModelSourceArrayOutput) ToRundeckProjectResourceModelSourceArrayOutput() RundeckProjectResourceModelSourceArrayOutput {
	return o
}

func (o RundeckProjectResourceModelSourceArrayOutput) ToRundeckProjectResourceModelSourceArrayOutputWithContext(ctx context.Context) RundeckProjectResourceModelSourceArrayOutput {
	return o
}

func (o RundeckProjectResourceModelSourceArrayOutput) Index(i pulumi.IntInput) RundeckProjectResourceModelSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RundeckProjectResourceModelSource {
		return vs[0].([]RundeckProjectResourceModelSource)[vs[1].(int)]
	}).(RundeckProjectResourceModelSourceOutput)
}

func init() {
	pulumi.RegisterOutputType(RundeckJobCommandOutput{})
	pulumi.RegisterOutputType(RundeckJobCommandArrayOutput{})
	pulumi.RegisterOutputType(RundeckJobCommandJobOutput{})
	pulumi.RegisterOutputType(RundeckJobCommandJobArrayOutput{})
	pulumi.RegisterOutputType(RundeckJobCommandJobNodefiltersOutput{})
	pulumi.RegisterOutputType(RundeckJobCommandJobNodefiltersPtrOutput{})
	pulumi.RegisterOutputType(RundeckJobCommandNodeStepPluginOutput{})
	pulumi.RegisterOutputType(RundeckJobCommandNodeStepPluginArrayOutput{})
	pulumi.RegisterOutputType(RundeckJobCommandStepPluginOutput{})
	pulumi.RegisterOutputType(RundeckJobCommandStepPluginArrayOutput{})
	pulumi.RegisterOutputType(RundeckJobNotificationOutput{})
	pulumi.RegisterOutputType(RundeckJobNotificationArrayOutput{})
	pulumi.RegisterOutputType(RundeckJobNotificationEmailOutput{})
	pulumi.RegisterOutputType(RundeckJobNotificationEmailArrayOutput{})
	pulumi.RegisterOutputType(RundeckJobNotificationPluginOutput{})
	pulumi.RegisterOutputType(RundeckJobNotificationPluginArrayOutput{})
	pulumi.RegisterOutputType(RundeckJobOptionOutput{})
	pulumi.RegisterOutputType(RundeckJobOptionArrayOutput{})
	pulumi.RegisterOutputType(RundeckProjectResourceModelSourceOutput{})
	pulumi.RegisterOutputType(RundeckProjectResourceModelSourceArrayOutput{})
}
