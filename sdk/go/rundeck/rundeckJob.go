// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rundeck

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type RundeckJob struct {
	pulumi.CustomResourceState

	// Boolean defining whether two or more executions of
	// this job can run concurrently. The default is `false`, meaning that jobs will only run
	// sequentially.
	AllowConcurrentExecutions pulumi.BoolPtrOutput         `pulumi:"allowConcurrentExecutions"`
	CommandOrderingStrategy   pulumi.StringPtrOutput       `pulumi:"commandOrderingStrategy"`
	Commands                  RundeckJobCommandArrayOutput `pulumi:"commands"`
	// Boolean defining whether Rundeck will continue to run
	// subsequent steps if any intermediate step fails. Defaults to `false`, meaning that execution
	// will stop and the execution will be considered to have failed.
	ContinueOnError pulumi.BoolPtrOutput `pulumi:"continueOnError"`
	// A longer description of the job, describing the job in the Rundeck UI.
	Description pulumi.StringOutput `pulumi:"description"`
	// If you want job execution to be enabled or disabled. Defaults to `true`.
	ExecutionEnabled pulumi.BoolPtrOutput `pulumi:"executionEnabled"`
	// The name of a group within the project in which to place the job.
	// Setting this creates collapsable subcategories within the Rundeck UI's project job index.
	GroupName pulumi.StringPtrOutput `pulumi:"groupName"`
	// The log level that Rundeck should use for this job. Defaults to "INFO".
	LogLevel pulumi.StringPtrOutput `pulumi:"logLevel"`
	// The maximum number of threads to use to execute this job, which
	// controls on how many nodes the commands can be run simulateneously. Defaults to 1, meaning that
	// the nodes will be visited sequentially.
	MaxThreadCount pulumi.IntPtrOutput `pulumi:"maxThreadCount"`
	// The name of the job, used to describe the job in the Rundeck UI.
	Name                        pulumi.StringOutput  `pulumi:"name"`
	NodeFilterExcludePrecedence pulumi.BoolPtrOutput `pulumi:"nodeFilterExcludePrecedence"`
	// A query string using
	// [Rundeck's node filter language](http://rundeck.org/docs/manual/node-filters.html#node-filter-syntax)
	// that defines which subset of the project's nodes will be used to execute this job.
	NodeFilterQuery      pulumi.StringPtrOutput            `pulumi:"nodeFilterQuery"`
	Notifications        RundeckJobNotificationArrayOutput `pulumi:"notifications"`
	Options              RundeckJobOptionArrayOutput       `pulumi:"options"`
	PreserveOptionsOrder pulumi.BoolOutput                 `pulumi:"preserveOptionsOrder"`
	// The name of the project that this job should belong to.
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
	// The name of the attribute that will be used to decide in which
	// order the nodes will be visited while executing the job across multiple nodes.
	RankAttribute pulumi.StringPtrOutput `pulumi:"rankAttribute"`
	// Keyword deciding which direction the nodes are sorted in terms of
	// the chosen `rankAttribute`. May be either "ascending" (the default) or "descending".
	RankOrder pulumi.StringPtrOutput `pulumi:"rankOrder"`
	// The jobs schedule in Unix crontab format
	Schedule pulumi.StringPtrOutput `pulumi:"schedule"`
	// Sets the job schedule to be enabled or disabled. Defaults to `true`.
	ScheduleEnabled pulumi.BoolPtrOutput `pulumi:"scheduleEnabled"`
	// Boolean determining if an empty node filter yields
	// a successful result.
	SuccessOnEmptyNodeFilter pulumi.BoolPtrOutput `pulumi:"successOnEmptyNodeFilter"`
}

// NewRundeckJob registers a new resource with the given unique name, arguments, and options.
func NewRundeckJob(ctx *pulumi.Context,
	name string, args *RundeckJobArgs, opts ...pulumi.ResourceOption) (*RundeckJob, error) {
	if args == nil || args.Commands == nil {
		return nil, errors.New("missing required argument 'Commands'")
	}
	if args == nil || args.Description == nil {
		return nil, errors.New("missing required argument 'Description'")
	}
	if args == nil || args.ProjectName == nil {
		return nil, errors.New("missing required argument 'ProjectName'")
	}
	if args == nil {
		args = &RundeckJobArgs{}
	}
	var resource RundeckJob
	err := ctx.RegisterResource("rundeck:index/rundeckJob:RundeckJob", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRundeckJob gets an existing RundeckJob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRundeckJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RundeckJobState, opts ...pulumi.ResourceOption) (*RundeckJob, error) {
	var resource RundeckJob
	err := ctx.ReadResource("rundeck:index/rundeckJob:RundeckJob", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RundeckJob resources.
type rundeckJobState struct {
	// Boolean defining whether two or more executions of
	// this job can run concurrently. The default is `false`, meaning that jobs will only run
	// sequentially.
	AllowConcurrentExecutions *bool               `pulumi:"allowConcurrentExecutions"`
	CommandOrderingStrategy   *string             `pulumi:"commandOrderingStrategy"`
	Commands                  []RundeckJobCommand `pulumi:"commands"`
	// Boolean defining whether Rundeck will continue to run
	// subsequent steps if any intermediate step fails. Defaults to `false`, meaning that execution
	// will stop and the execution will be considered to have failed.
	ContinueOnError *bool `pulumi:"continueOnError"`
	// A longer description of the job, describing the job in the Rundeck UI.
	Description *string `pulumi:"description"`
	// If you want job execution to be enabled or disabled. Defaults to `true`.
	ExecutionEnabled *bool `pulumi:"executionEnabled"`
	// The name of a group within the project in which to place the job.
	// Setting this creates collapsable subcategories within the Rundeck UI's project job index.
	GroupName *string `pulumi:"groupName"`
	// The log level that Rundeck should use for this job. Defaults to "INFO".
	LogLevel *string `pulumi:"logLevel"`
	// The maximum number of threads to use to execute this job, which
	// controls on how many nodes the commands can be run simulateneously. Defaults to 1, meaning that
	// the nodes will be visited sequentially.
	MaxThreadCount *int `pulumi:"maxThreadCount"`
	// The name of the job, used to describe the job in the Rundeck UI.
	Name                        *string `pulumi:"name"`
	NodeFilterExcludePrecedence *bool   `pulumi:"nodeFilterExcludePrecedence"`
	// A query string using
	// [Rundeck's node filter language](http://rundeck.org/docs/manual/node-filters.html#node-filter-syntax)
	// that defines which subset of the project's nodes will be used to execute this job.
	NodeFilterQuery      *string                  `pulumi:"nodeFilterQuery"`
	Notifications        []RundeckJobNotification `pulumi:"notifications"`
	Options              []RundeckJobOption       `pulumi:"options"`
	PreserveOptionsOrder *bool                    `pulumi:"preserveOptionsOrder"`
	// The name of the project that this job should belong to.
	ProjectName *string `pulumi:"projectName"`
	// The name of the attribute that will be used to decide in which
	// order the nodes will be visited while executing the job across multiple nodes.
	RankAttribute *string `pulumi:"rankAttribute"`
	// Keyword deciding which direction the nodes are sorted in terms of
	// the chosen `rankAttribute`. May be either "ascending" (the default) or "descending".
	RankOrder *string `pulumi:"rankOrder"`
	// The jobs schedule in Unix crontab format
	Schedule *string `pulumi:"schedule"`
	// Sets the job schedule to be enabled or disabled. Defaults to `true`.
	ScheduleEnabled *bool `pulumi:"scheduleEnabled"`
	// Boolean determining if an empty node filter yields
	// a successful result.
	SuccessOnEmptyNodeFilter *bool `pulumi:"successOnEmptyNodeFilter"`
}

type RundeckJobState struct {
	// Boolean defining whether two or more executions of
	// this job can run concurrently. The default is `false`, meaning that jobs will only run
	// sequentially.
	AllowConcurrentExecutions pulumi.BoolPtrInput
	CommandOrderingStrategy   pulumi.StringPtrInput
	Commands                  RundeckJobCommandArrayInput
	// Boolean defining whether Rundeck will continue to run
	// subsequent steps if any intermediate step fails. Defaults to `false`, meaning that execution
	// will stop and the execution will be considered to have failed.
	ContinueOnError pulumi.BoolPtrInput
	// A longer description of the job, describing the job in the Rundeck UI.
	Description pulumi.StringPtrInput
	// If you want job execution to be enabled or disabled. Defaults to `true`.
	ExecutionEnabled pulumi.BoolPtrInput
	// The name of a group within the project in which to place the job.
	// Setting this creates collapsable subcategories within the Rundeck UI's project job index.
	GroupName pulumi.StringPtrInput
	// The log level that Rundeck should use for this job. Defaults to "INFO".
	LogLevel pulumi.StringPtrInput
	// The maximum number of threads to use to execute this job, which
	// controls on how many nodes the commands can be run simulateneously. Defaults to 1, meaning that
	// the nodes will be visited sequentially.
	MaxThreadCount pulumi.IntPtrInput
	// The name of the job, used to describe the job in the Rundeck UI.
	Name                        pulumi.StringPtrInput
	NodeFilterExcludePrecedence pulumi.BoolPtrInput
	// A query string using
	// [Rundeck's node filter language](http://rundeck.org/docs/manual/node-filters.html#node-filter-syntax)
	// that defines which subset of the project's nodes will be used to execute this job.
	NodeFilterQuery      pulumi.StringPtrInput
	Notifications        RundeckJobNotificationArrayInput
	Options              RundeckJobOptionArrayInput
	PreserveOptionsOrder pulumi.BoolPtrInput
	// The name of the project that this job should belong to.
	ProjectName pulumi.StringPtrInput
	// The name of the attribute that will be used to decide in which
	// order the nodes will be visited while executing the job across multiple nodes.
	RankAttribute pulumi.StringPtrInput
	// Keyword deciding which direction the nodes are sorted in terms of
	// the chosen `rankAttribute`. May be either "ascending" (the default) or "descending".
	RankOrder pulumi.StringPtrInput
	// The jobs schedule in Unix crontab format
	Schedule pulumi.StringPtrInput
	// Sets the job schedule to be enabled or disabled. Defaults to `true`.
	ScheduleEnabled pulumi.BoolPtrInput
	// Boolean determining if an empty node filter yields
	// a successful result.
	SuccessOnEmptyNodeFilter pulumi.BoolPtrInput
}

func (RundeckJobState) ElementType() reflect.Type {
	return reflect.TypeOf((*rundeckJobState)(nil)).Elem()
}

type rundeckJobArgs struct {
	// Boolean defining whether two or more executions of
	// this job can run concurrently. The default is `false`, meaning that jobs will only run
	// sequentially.
	AllowConcurrentExecutions *bool               `pulumi:"allowConcurrentExecutions"`
	CommandOrderingStrategy   *string             `pulumi:"commandOrderingStrategy"`
	Commands                  []RundeckJobCommand `pulumi:"commands"`
	// Boolean defining whether Rundeck will continue to run
	// subsequent steps if any intermediate step fails. Defaults to `false`, meaning that execution
	// will stop and the execution will be considered to have failed.
	ContinueOnError *bool `pulumi:"continueOnError"`
	// A longer description of the job, describing the job in the Rundeck UI.
	Description string `pulumi:"description"`
	// If you want job execution to be enabled or disabled. Defaults to `true`.
	ExecutionEnabled *bool `pulumi:"executionEnabled"`
	// The name of a group within the project in which to place the job.
	// Setting this creates collapsable subcategories within the Rundeck UI's project job index.
	GroupName *string `pulumi:"groupName"`
	// The log level that Rundeck should use for this job. Defaults to "INFO".
	LogLevel *string `pulumi:"logLevel"`
	// The maximum number of threads to use to execute this job, which
	// controls on how many nodes the commands can be run simulateneously. Defaults to 1, meaning that
	// the nodes will be visited sequentially.
	MaxThreadCount *int `pulumi:"maxThreadCount"`
	// The name of the job, used to describe the job in the Rundeck UI.
	Name                        *string `pulumi:"name"`
	NodeFilterExcludePrecedence *bool   `pulumi:"nodeFilterExcludePrecedence"`
	// A query string using
	// [Rundeck's node filter language](http://rundeck.org/docs/manual/node-filters.html#node-filter-syntax)
	// that defines which subset of the project's nodes will be used to execute this job.
	NodeFilterQuery      *string                  `pulumi:"nodeFilterQuery"`
	Notifications        []RundeckJobNotification `pulumi:"notifications"`
	Options              []RundeckJobOption       `pulumi:"options"`
	PreserveOptionsOrder *bool                    `pulumi:"preserveOptionsOrder"`
	// The name of the project that this job should belong to.
	ProjectName string `pulumi:"projectName"`
	// The name of the attribute that will be used to decide in which
	// order the nodes will be visited while executing the job across multiple nodes.
	RankAttribute *string `pulumi:"rankAttribute"`
	// Keyword deciding which direction the nodes are sorted in terms of
	// the chosen `rankAttribute`. May be either "ascending" (the default) or "descending".
	RankOrder *string `pulumi:"rankOrder"`
	// The jobs schedule in Unix crontab format
	Schedule *string `pulumi:"schedule"`
	// Sets the job schedule to be enabled or disabled. Defaults to `true`.
	ScheduleEnabled *bool `pulumi:"scheduleEnabled"`
	// Boolean determining if an empty node filter yields
	// a successful result.
	SuccessOnEmptyNodeFilter *bool `pulumi:"successOnEmptyNodeFilter"`
}

// The set of arguments for constructing a RundeckJob resource.
type RundeckJobArgs struct {
	// Boolean defining whether two or more executions of
	// this job can run concurrently. The default is `false`, meaning that jobs will only run
	// sequentially.
	AllowConcurrentExecutions pulumi.BoolPtrInput
	CommandOrderingStrategy   pulumi.StringPtrInput
	Commands                  RundeckJobCommandArrayInput
	// Boolean defining whether Rundeck will continue to run
	// subsequent steps if any intermediate step fails. Defaults to `false`, meaning that execution
	// will stop and the execution will be considered to have failed.
	ContinueOnError pulumi.BoolPtrInput
	// A longer description of the job, describing the job in the Rundeck UI.
	Description pulumi.StringInput
	// If you want job execution to be enabled or disabled. Defaults to `true`.
	ExecutionEnabled pulumi.BoolPtrInput
	// The name of a group within the project in which to place the job.
	// Setting this creates collapsable subcategories within the Rundeck UI's project job index.
	GroupName pulumi.StringPtrInput
	// The log level that Rundeck should use for this job. Defaults to "INFO".
	LogLevel pulumi.StringPtrInput
	// The maximum number of threads to use to execute this job, which
	// controls on how many nodes the commands can be run simulateneously. Defaults to 1, meaning that
	// the nodes will be visited sequentially.
	MaxThreadCount pulumi.IntPtrInput
	// The name of the job, used to describe the job in the Rundeck UI.
	Name                        pulumi.StringPtrInput
	NodeFilterExcludePrecedence pulumi.BoolPtrInput
	// A query string using
	// [Rundeck's node filter language](http://rundeck.org/docs/manual/node-filters.html#node-filter-syntax)
	// that defines which subset of the project's nodes will be used to execute this job.
	NodeFilterQuery      pulumi.StringPtrInput
	Notifications        RundeckJobNotificationArrayInput
	Options              RundeckJobOptionArrayInput
	PreserveOptionsOrder pulumi.BoolPtrInput
	// The name of the project that this job should belong to.
	ProjectName pulumi.StringInput
	// The name of the attribute that will be used to decide in which
	// order the nodes will be visited while executing the job across multiple nodes.
	RankAttribute pulumi.StringPtrInput
	// Keyword deciding which direction the nodes are sorted in terms of
	// the chosen `rankAttribute`. May be either "ascending" (the default) or "descending".
	RankOrder pulumi.StringPtrInput
	// The jobs schedule in Unix crontab format
	Schedule pulumi.StringPtrInput
	// Sets the job schedule to be enabled or disabled. Defaults to `true`.
	ScheduleEnabled pulumi.BoolPtrInput
	// Boolean determining if an empty node filter yields
	// a successful result.
	SuccessOnEmptyNodeFilter pulumi.BoolPtrInput
}

func (RundeckJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rundeckJobArgs)(nil)).Elem()
}
