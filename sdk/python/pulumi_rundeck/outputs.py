# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables
from . import outputs

__all__ = [
    'RundeckJobCommand',
    'RundeckJobCommandJob',
    'RundeckJobCommandJobNodefilters',
    'RundeckJobCommandNodeStepPlugin',
    'RundeckJobCommandStepPlugin',
    'RundeckJobNotification',
    'RundeckJobNotificationEmail',
    'RundeckJobNotificationPlugin',
    'RundeckJobOption',
    'RundeckProjectResourceModelSource',
]

@pulumi.output_type
class RundeckJobCommand(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 inline_script: Optional[str] = None,
                 jobs: Optional[Sequence['outputs.RundeckJobCommandJob']] = None,
                 node_step_plugins: Optional[Sequence['outputs.RundeckJobCommandNodeStepPlugin']] = None,
                 script_file: Optional[str] = None,
                 script_file_args: Optional[str] = None,
                 shell_command: Optional[str] = None,
                 step_plugins: Optional[Sequence['outputs.RundeckJobCommandStepPlugin']] = None):
        """
        :param str description: A longer description of the job, describing the job in the Rundeck UI.
        :param str inline_script: gives a whole shell script, inline in the configuration, to execute on the nodes.
        :param str script_file: and `script_file_args` together describe a script that is already pre-installed
               on the nodes which is to be executed.
        :param str shell_command: gives a single shell command to execute on the nodes.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if inline_script is not None:
            pulumi.set(__self__, "inline_script", inline_script)
        if jobs is not None:
            pulumi.set(__self__, "jobs", jobs)
        if node_step_plugins is not None:
            pulumi.set(__self__, "node_step_plugins", node_step_plugins)
        if script_file is not None:
            pulumi.set(__self__, "script_file", script_file)
        if script_file_args is not None:
            pulumi.set(__self__, "script_file_args", script_file_args)
        if shell_command is not None:
            pulumi.set(__self__, "shell_command", shell_command)
        if step_plugins is not None:
            pulumi.set(__self__, "step_plugins", step_plugins)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        A longer description of the job, describing the job in the Rundeck UI.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="inlineScript")
    def inline_script(self) -> Optional[str]:
        """
        gives a whole shell script, inline in the configuration, to execute on the nodes.
        """
        return pulumi.get(self, "inline_script")

    @property
    @pulumi.getter
    def jobs(self) -> Optional[Sequence['outputs.RundeckJobCommandJob']]:
        return pulumi.get(self, "jobs")

    @property
    @pulumi.getter(name="nodeStepPlugins")
    def node_step_plugins(self) -> Optional[Sequence['outputs.RundeckJobCommandNodeStepPlugin']]:
        return pulumi.get(self, "node_step_plugins")

    @property
    @pulumi.getter(name="scriptFile")
    def script_file(self) -> Optional[str]:
        """
        and `script_file_args` together describe a script that is already pre-installed
        on the nodes which is to be executed.
        """
        return pulumi.get(self, "script_file")

    @property
    @pulumi.getter(name="scriptFileArgs")
    def script_file_args(self) -> Optional[str]:
        return pulumi.get(self, "script_file_args")

    @property
    @pulumi.getter(name="shellCommand")
    def shell_command(self) -> Optional[str]:
        """
        gives a single shell command to execute on the nodes.
        """
        return pulumi.get(self, "shell_command")

    @property
    @pulumi.getter(name="stepPlugins")
    def step_plugins(self) -> Optional[Sequence['outputs.RundeckJobCommandStepPlugin']]:
        return pulumi.get(self, "step_plugins")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RundeckJobCommandJob(dict):
    def __init__(__self__, *,
                 name: str,
                 args: Optional[str] = None,
                 group_name: Optional[str] = None,
                 nodefilters: Optional['outputs.RundeckJobCommandJobNodefilters'] = None,
                 run_for_each_node: Optional[bool] = None):
        """
        :param str name: The name of the job, used to describe the job in the Rundeck UI.
        :param str group_name: The name of a group within the project in which to place the job.
               Setting this creates collapsable subcategories within the Rundeck UI's project job index.
        """
        pulumi.set(__self__, "name", name)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if nodefilters is not None:
            pulumi.set(__self__, "nodefilters", nodefilters)
        if run_for_each_node is not None:
            pulumi.set(__self__, "run_for_each_node", run_for_each_node)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the job, used to describe the job in the Rundeck UI.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def args(self) -> Optional[str]:
        return pulumi.get(self, "args")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[str]:
        """
        The name of a group within the project in which to place the job.
        Setting this creates collapsable subcategories within the Rundeck UI's project job index.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter
    def nodefilters(self) -> Optional['outputs.RundeckJobCommandJobNodefilters']:
        return pulumi.get(self, "nodefilters")

    @property
    @pulumi.getter(name="runForEachNode")
    def run_for_each_node(self) -> Optional[bool]:
        return pulumi.get(self, "run_for_each_node")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RundeckJobCommandJobNodefilters(dict):
    def __init__(__self__, *,
                 excludeprecedence: Optional[str] = None,
                 filter: Optional[str] = None):
        if excludeprecedence is not None:
            pulumi.set(__self__, "excludeprecedence", excludeprecedence)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)

    @property
    @pulumi.getter
    def excludeprecedence(self) -> Optional[str]:
        return pulumi.get(self, "excludeprecedence")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        return pulumi.get(self, "filter")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RundeckJobCommandNodeStepPlugin(dict):
    def __init__(__self__, *,
                 type: str,
                 config: Optional[Mapping[str, Any]] = None):
        """
        :param str type: The name of the plugin to use.
        :param Mapping[str, Any] config: Map of arbitrary configuration properties for the selected plugin.
        """
        pulumi.set(__self__, "type", type)
        if config is not None:
            pulumi.set(__self__, "config", config)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The name of the plugin to use.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def config(self) -> Optional[Mapping[str, Any]]:
        """
        Map of arbitrary configuration properties for the selected plugin.
        """
        return pulumi.get(self, "config")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RundeckJobCommandStepPlugin(dict):
    def __init__(__self__, *,
                 type: str,
                 config: Optional[Mapping[str, Any]] = None):
        """
        :param str type: The name of the plugin to use.
        :param Mapping[str, Any] config: Map of arbitrary configuration properties for the selected plugin.
        """
        pulumi.set(__self__, "type", type)
        if config is not None:
            pulumi.set(__self__, "config", config)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The name of the plugin to use.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def config(self) -> Optional[Mapping[str, Any]]:
        """
        Map of arbitrary configuration properties for the selected plugin.
        """
        return pulumi.get(self, "config")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RundeckJobNotification(dict):
    def __init__(__self__, *,
                 type: str,
                 emails: Optional[Sequence['outputs.RundeckJobNotificationEmail']] = None,
                 plugins: Optional[Sequence['outputs.RundeckJobNotificationPlugin']] = None,
                 webhook_urls: Optional[Sequence[str]] = None):
        """
        :param str type: The name of the plugin to use.
        """
        pulumi.set(__self__, "type", type)
        if emails is not None:
            pulumi.set(__self__, "emails", emails)
        if plugins is not None:
            pulumi.set(__self__, "plugins", plugins)
        if webhook_urls is not None:
            pulumi.set(__self__, "webhook_urls", webhook_urls)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The name of the plugin to use.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def emails(self) -> Optional[Sequence['outputs.RundeckJobNotificationEmail']]:
        return pulumi.get(self, "emails")

    @property
    @pulumi.getter
    def plugins(self) -> Optional[Sequence['outputs.RundeckJobNotificationPlugin']]:
        return pulumi.get(self, "plugins")

    @property
    @pulumi.getter(name="webhookUrls")
    def webhook_urls(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "webhook_urls")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RundeckJobNotificationEmail(dict):
    def __init__(__self__, *,
                 recipients: Sequence[str],
                 attach_log: Optional[bool] = None,
                 subject: Optional[str] = None):
        pulumi.set(__self__, "recipients", recipients)
        if attach_log is not None:
            pulumi.set(__self__, "attach_log", attach_log)
        if subject is not None:
            pulumi.set(__self__, "subject", subject)

    @property
    @pulumi.getter
    def recipients(self) -> Sequence[str]:
        return pulumi.get(self, "recipients")

    @property
    @pulumi.getter(name="attachLog")
    def attach_log(self) -> Optional[bool]:
        return pulumi.get(self, "attach_log")

    @property
    @pulumi.getter
    def subject(self) -> Optional[str]:
        return pulumi.get(self, "subject")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RundeckJobNotificationPlugin(dict):
    def __init__(__self__, *,
                 type: str,
                 config: Optional[Mapping[str, Any]] = None):
        """
        :param str type: The name of the plugin to use.
        :param Mapping[str, Any] config: Map of arbitrary configuration properties for the selected plugin.
        """
        pulumi.set(__self__, "type", type)
        if config is not None:
            pulumi.set(__self__, "config", config)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The name of the plugin to use.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def config(self) -> Optional[Mapping[str, Any]]:
        """
        Map of arbitrary configuration properties for the selected plugin.
        """
        return pulumi.get(self, "config")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RundeckJobOption(dict):
    def __init__(__self__, *,
                 name: str,
                 allow_multiple_values: Optional[bool] = None,
                 default_value: Optional[str] = None,
                 description: Optional[str] = None,
                 exposed_to_scripts: Optional[bool] = None,
                 multi_value_delimiter: Optional[str] = None,
                 obscure_input: Optional[bool] = None,
                 require_predefined_choice: Optional[bool] = None,
                 required: Optional[bool] = None,
                 validation_regex: Optional[str] = None,
                 value_choices: Optional[Sequence[str]] = None,
                 value_choices_url: Optional[str] = None):
        """
        :param str name: The name of the job, used to describe the job in the Rundeck UI.
        :param str description: A longer description of the job, describing the job in the Rundeck UI.
        """
        pulumi.set(__self__, "name", name)
        if allow_multiple_values is not None:
            pulumi.set(__self__, "allow_multiple_values", allow_multiple_values)
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if exposed_to_scripts is not None:
            pulumi.set(__self__, "exposed_to_scripts", exposed_to_scripts)
        if multi_value_delimiter is not None:
            pulumi.set(__self__, "multi_value_delimiter", multi_value_delimiter)
        if obscure_input is not None:
            pulumi.set(__self__, "obscure_input", obscure_input)
        if require_predefined_choice is not None:
            pulumi.set(__self__, "require_predefined_choice", require_predefined_choice)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if validation_regex is not None:
            pulumi.set(__self__, "validation_regex", validation_regex)
        if value_choices is not None:
            pulumi.set(__self__, "value_choices", value_choices)
        if value_choices_url is not None:
            pulumi.set(__self__, "value_choices_url", value_choices_url)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the job, used to describe the job in the Rundeck UI.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="allowMultipleValues")
    def allow_multiple_values(self) -> Optional[bool]:
        return pulumi.get(self, "allow_multiple_values")

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[str]:
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        A longer description of the job, describing the job in the Rundeck UI.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="exposedToScripts")
    def exposed_to_scripts(self) -> Optional[bool]:
        return pulumi.get(self, "exposed_to_scripts")

    @property
    @pulumi.getter(name="multiValueDelimiter")
    def multi_value_delimiter(self) -> Optional[str]:
        return pulumi.get(self, "multi_value_delimiter")

    @property
    @pulumi.getter(name="obscureInput")
    def obscure_input(self) -> Optional[bool]:
        return pulumi.get(self, "obscure_input")

    @property
    @pulumi.getter(name="requirePredefinedChoice")
    def require_predefined_choice(self) -> Optional[bool]:
        return pulumi.get(self, "require_predefined_choice")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter(name="validationRegex")
    def validation_regex(self) -> Optional[str]:
        return pulumi.get(self, "validation_regex")

    @property
    @pulumi.getter(name="valueChoices")
    def value_choices(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "value_choices")

    @property
    @pulumi.getter(name="valueChoicesUrl")
    def value_choices_url(self) -> Optional[str]:
        return pulumi.get(self, "value_choices_url")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RundeckProjectResourceModelSource(dict):
    def __init__(__self__, *,
                 config: Mapping[str, Any],
                 type: str):
        """
        :param Mapping[str, Any] config: Map of arbitrary configuration properties for the selected resource model
               plugin.
        :param str type: The name of the resource model plugin to use.
        """
        pulumi.set(__self__, "config", config)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def config(self) -> Mapping[str, Any]:
        """
        Map of arbitrary configuration properties for the selected resource model
        plugin.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The name of the resource model plugin to use.
        """
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


