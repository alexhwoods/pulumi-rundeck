# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['RundeckJob']


class RundeckJob(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_concurrent_executions: Optional[pulumi.Input[bool]] = None,
                 command_ordering_strategy: Optional[pulumi.Input[str]] = None,
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RundeckJobCommandArgs']]]]] = None,
                 continue_on_error: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 execution_enabled: Optional[pulumi.Input[bool]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 log_level: Optional[pulumi.Input[str]] = None,
                 max_thread_count: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_filter_exclude_precedence: Optional[pulumi.Input[bool]] = None,
                 node_filter_query: Optional[pulumi.Input[str]] = None,
                 notifications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RundeckJobNotificationArgs']]]]] = None,
                 options: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RundeckJobOptionArgs']]]]] = None,
                 preserve_options_order: Optional[pulumi.Input[bool]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 rank_attribute: Optional[pulumi.Input[str]] = None,
                 rank_order: Optional[pulumi.Input[str]] = None,
                 schedule: Optional[pulumi.Input[str]] = None,
                 schedule_enabled: Optional[pulumi.Input[bool]] = None,
                 success_on_empty_node_filter: Optional[pulumi.Input[bool]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Create a RundeckJob resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] allow_concurrent_executions: Boolean defining whether two or more executions of
               this job can run concurrently. The default is `false`, meaning that jobs will only run
               sequentially.
        :param pulumi.Input[bool] continue_on_error: Boolean defining whether Rundeck will continue to run
               subsequent steps if any intermediate step fails. Defaults to `false`, meaning that execution
               will stop and the execution will be considered to have failed.
        :param pulumi.Input[str] description: A longer description of the job, describing the job in the Rundeck UI.
        :param pulumi.Input[bool] execution_enabled: If you want job execution to be enabled or disabled. Defaults to `true`.
        :param pulumi.Input[str] group_name: The name of a group within the project in which to place the job.
               Setting this creates collapsable subcategories within the Rundeck UI's project job index.
        :param pulumi.Input[str] log_level: The log level that Rundeck should use for this job. Defaults to "INFO".
        :param pulumi.Input[int] max_thread_count: The maximum number of threads to use to execute this job, which
               controls on how many nodes the commands can be run simulateneously. Defaults to 1, meaning that
               the nodes will be visited sequentially.
        :param pulumi.Input[str] name: The name of the job, used to describe the job in the Rundeck UI.
        :param pulumi.Input[str] node_filter_query: A query string using
               [Rundeck's node filter language](http://rundeck.org/docs/manual/node-filters.html#node-filter-syntax)
               that defines which subset of the project's nodes will be used to execute this job.
        :param pulumi.Input[str] project_name: The name of the project that this job should belong to.
        :param pulumi.Input[str] rank_attribute: The name of the attribute that will be used to decide in which
               order the nodes will be visited while executing the job across multiple nodes.
        :param pulumi.Input[str] rank_order: Keyword deciding which direction the nodes are sorted in terms of
               the chosen `rank_attribute`. May be either "ascending" (the default) or "descending".
        :param pulumi.Input[str] schedule: The jobs schedule in Unix crontab format
        :param pulumi.Input[bool] schedule_enabled: Sets the job schedule to be enabled or disabled. Defaults to `true`.
        :param pulumi.Input[bool] success_on_empty_node_filter: Boolean determining if an empty node filter yields
               a successful result.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['allow_concurrent_executions'] = allow_concurrent_executions
            __props__['command_ordering_strategy'] = command_ordering_strategy
            if commands is None:
                raise TypeError("Missing required property 'commands'")
            __props__['commands'] = commands
            __props__['continue_on_error'] = continue_on_error
            if description is None:
                raise TypeError("Missing required property 'description'")
            __props__['description'] = description
            __props__['execution_enabled'] = execution_enabled
            __props__['group_name'] = group_name
            __props__['log_level'] = log_level
            __props__['max_thread_count'] = max_thread_count
            __props__['name'] = name
            __props__['node_filter_exclude_precedence'] = node_filter_exclude_precedence
            __props__['node_filter_query'] = node_filter_query
            __props__['notifications'] = notifications
            __props__['options'] = options
            __props__['preserve_options_order'] = preserve_options_order
            if project_name is None:
                raise TypeError("Missing required property 'project_name'")
            __props__['project_name'] = project_name
            __props__['rank_attribute'] = rank_attribute
            __props__['rank_order'] = rank_order
            __props__['schedule'] = schedule
            __props__['schedule_enabled'] = schedule_enabled
            __props__['success_on_empty_node_filter'] = success_on_empty_node_filter
        super(RundeckJob, __self__).__init__(
            'rundeck:index/rundeckJob:RundeckJob',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allow_concurrent_executions: Optional[pulumi.Input[bool]] = None,
            command_ordering_strategy: Optional[pulumi.Input[str]] = None,
            commands: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RundeckJobCommandArgs']]]]] = None,
            continue_on_error: Optional[pulumi.Input[bool]] = None,
            description: Optional[pulumi.Input[str]] = None,
            execution_enabled: Optional[pulumi.Input[bool]] = None,
            group_name: Optional[pulumi.Input[str]] = None,
            log_level: Optional[pulumi.Input[str]] = None,
            max_thread_count: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            node_filter_exclude_precedence: Optional[pulumi.Input[bool]] = None,
            node_filter_query: Optional[pulumi.Input[str]] = None,
            notifications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RundeckJobNotificationArgs']]]]] = None,
            options: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RundeckJobOptionArgs']]]]] = None,
            preserve_options_order: Optional[pulumi.Input[bool]] = None,
            project_name: Optional[pulumi.Input[str]] = None,
            rank_attribute: Optional[pulumi.Input[str]] = None,
            rank_order: Optional[pulumi.Input[str]] = None,
            schedule: Optional[pulumi.Input[str]] = None,
            schedule_enabled: Optional[pulumi.Input[bool]] = None,
            success_on_empty_node_filter: Optional[pulumi.Input[bool]] = None) -> 'RundeckJob':
        """
        Get an existing RundeckJob resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] allow_concurrent_executions: Boolean defining whether two or more executions of
               this job can run concurrently. The default is `false`, meaning that jobs will only run
               sequentially.
        :param pulumi.Input[bool] continue_on_error: Boolean defining whether Rundeck will continue to run
               subsequent steps if any intermediate step fails. Defaults to `false`, meaning that execution
               will stop and the execution will be considered to have failed.
        :param pulumi.Input[str] description: A longer description of the job, describing the job in the Rundeck UI.
        :param pulumi.Input[bool] execution_enabled: If you want job execution to be enabled or disabled. Defaults to `true`.
        :param pulumi.Input[str] group_name: The name of a group within the project in which to place the job.
               Setting this creates collapsable subcategories within the Rundeck UI's project job index.
        :param pulumi.Input[str] log_level: The log level that Rundeck should use for this job. Defaults to "INFO".
        :param pulumi.Input[int] max_thread_count: The maximum number of threads to use to execute this job, which
               controls on how many nodes the commands can be run simulateneously. Defaults to 1, meaning that
               the nodes will be visited sequentially.
        :param pulumi.Input[str] name: The name of the job, used to describe the job in the Rundeck UI.
        :param pulumi.Input[str] node_filter_query: A query string using
               [Rundeck's node filter language](http://rundeck.org/docs/manual/node-filters.html#node-filter-syntax)
               that defines which subset of the project's nodes will be used to execute this job.
        :param pulumi.Input[str] project_name: The name of the project that this job should belong to.
        :param pulumi.Input[str] rank_attribute: The name of the attribute that will be used to decide in which
               order the nodes will be visited while executing the job across multiple nodes.
        :param pulumi.Input[str] rank_order: Keyword deciding which direction the nodes are sorted in terms of
               the chosen `rank_attribute`. May be either "ascending" (the default) or "descending".
        :param pulumi.Input[str] schedule: The jobs schedule in Unix crontab format
        :param pulumi.Input[bool] schedule_enabled: Sets the job schedule to be enabled or disabled. Defaults to `true`.
        :param pulumi.Input[bool] success_on_empty_node_filter: Boolean determining if an empty node filter yields
               a successful result.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["allow_concurrent_executions"] = allow_concurrent_executions
        __props__["command_ordering_strategy"] = command_ordering_strategy
        __props__["commands"] = commands
        __props__["continue_on_error"] = continue_on_error
        __props__["description"] = description
        __props__["execution_enabled"] = execution_enabled
        __props__["group_name"] = group_name
        __props__["log_level"] = log_level
        __props__["max_thread_count"] = max_thread_count
        __props__["name"] = name
        __props__["node_filter_exclude_precedence"] = node_filter_exclude_precedence
        __props__["node_filter_query"] = node_filter_query
        __props__["notifications"] = notifications
        __props__["options"] = options
        __props__["preserve_options_order"] = preserve_options_order
        __props__["project_name"] = project_name
        __props__["rank_attribute"] = rank_attribute
        __props__["rank_order"] = rank_order
        __props__["schedule"] = schedule
        __props__["schedule_enabled"] = schedule_enabled
        __props__["success_on_empty_node_filter"] = success_on_empty_node_filter
        return RundeckJob(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allowConcurrentExecutions")
    def allow_concurrent_executions(self) -> pulumi.Output[Optional[bool]]:
        """
        Boolean defining whether two or more executions of
        this job can run concurrently. The default is `false`, meaning that jobs will only run
        sequentially.
        """
        return pulumi.get(self, "allow_concurrent_executions")

    @property
    @pulumi.getter(name="commandOrderingStrategy")
    def command_ordering_strategy(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "command_ordering_strategy")

    @property
    @pulumi.getter
    def commands(self) -> pulumi.Output[Sequence['outputs.RundeckJobCommand']]:
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter(name="continueOnError")
    def continue_on_error(self) -> pulumi.Output[Optional[bool]]:
        """
        Boolean defining whether Rundeck will continue to run
        subsequent steps if any intermediate step fails. Defaults to `false`, meaning that execution
        will stop and the execution will be considered to have failed.
        """
        return pulumi.get(self, "continue_on_error")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        A longer description of the job, describing the job in the Rundeck UI.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="executionEnabled")
    def execution_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        If you want job execution to be enabled or disabled. Defaults to `true`.
        """
        return pulumi.get(self, "execution_enabled")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> pulumi.Output[Optional[str]]:
        """
        The name of a group within the project in which to place the job.
        Setting this creates collapsable subcategories within the Rundeck UI's project job index.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> pulumi.Output[Optional[str]]:
        """
        The log level that Rundeck should use for this job. Defaults to "INFO".
        """
        return pulumi.get(self, "log_level")

    @property
    @pulumi.getter(name="maxThreadCount")
    def max_thread_count(self) -> pulumi.Output[Optional[int]]:
        """
        The maximum number of threads to use to execute this job, which
        controls on how many nodes the commands can be run simulateneously. Defaults to 1, meaning that
        the nodes will be visited sequentially.
        """
        return pulumi.get(self, "max_thread_count")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the job, used to describe the job in the Rundeck UI.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeFilterExcludePrecedence")
    def node_filter_exclude_precedence(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "node_filter_exclude_precedence")

    @property
    @pulumi.getter(name="nodeFilterQuery")
    def node_filter_query(self) -> pulumi.Output[Optional[str]]:
        """
        A query string using
        [Rundeck's node filter language](http://rundeck.org/docs/manual/node-filters.html#node-filter-syntax)
        that defines which subset of the project's nodes will be used to execute this job.
        """
        return pulumi.get(self, "node_filter_query")

    @property
    @pulumi.getter
    def notifications(self) -> pulumi.Output[Optional[Sequence['outputs.RundeckJobNotification']]]:
        return pulumi.get(self, "notifications")

    @property
    @pulumi.getter
    def options(self) -> pulumi.Output[Optional[Sequence['outputs.RundeckJobOption']]]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="preserveOptionsOrder")
    def preserve_options_order(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "preserve_options_order")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> pulumi.Output[str]:
        """
        The name of the project that this job should belong to.
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="rankAttribute")
    def rank_attribute(self) -> pulumi.Output[Optional[str]]:
        """
        The name of the attribute that will be used to decide in which
        order the nodes will be visited while executing the job across multiple nodes.
        """
        return pulumi.get(self, "rank_attribute")

    @property
    @pulumi.getter(name="rankOrder")
    def rank_order(self) -> pulumi.Output[Optional[str]]:
        """
        Keyword deciding which direction the nodes are sorted in terms of
        the chosen `rank_attribute`. May be either "ascending" (the default) or "descending".
        """
        return pulumi.get(self, "rank_order")

    @property
    @pulumi.getter
    def schedule(self) -> pulumi.Output[Optional[str]]:
        """
        The jobs schedule in Unix crontab format
        """
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter(name="scheduleEnabled")
    def schedule_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Sets the job schedule to be enabled or disabled. Defaults to `true`.
        """
        return pulumi.get(self, "schedule_enabled")

    @property
    @pulumi.getter(name="successOnEmptyNodeFilter")
    def success_on_empty_node_filter(self) -> pulumi.Output[Optional[bool]]:
        """
        Boolean determining if an empty node filter yields
        a successful result.
        """
        return pulumi.get(self, "success_on_empty_node_filter")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

