# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables

__all__ = ['RundeckPrivateKey']


class RundeckPrivateKey(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 key_material: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        The private key resource allows SSH private keys to be stored into Rundeck's key store.
        The key store is where Rundeck keeps credentials that are needed to access the nodes on which
        it runs commands.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_rundeck as rundeck

        anvils = rundeck.RundeckPrivateKey("anvils",
            key_material=(lambda path: open(path).read())("/id_rsa"),
            path="anvils/id_rsa")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] key_material: The private key material to store, serialized in any way that is
               accepted by OpenSSH.
        :param pulumi.Input[str] path: The path within the key store where the key will be stored.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if key_material is None:
                raise TypeError("Missing required property 'key_material'")
            __props__['key_material'] = key_material
            if path is None:
                raise TypeError("Missing required property 'path'")
            __props__['path'] = path
        super(RundeckPrivateKey, __self__).__init__(
            'rundeck:index/rundeckPrivateKey:RundeckPrivateKey',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            key_material: Optional[pulumi.Input[str]] = None,
            path: Optional[pulumi.Input[str]] = None) -> 'RundeckPrivateKey':
        """
        Get an existing RundeckPrivateKey resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] key_material: The private key material to store, serialized in any way that is
               accepted by OpenSSH.
        :param pulumi.Input[str] path: The path within the key store where the key will be stored.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["key_material"] = key_material
        __props__["path"] = path
        return RundeckPrivateKey(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="keyMaterial")
    def key_material(self) -> pulumi.Output[str]:
        """
        The private key material to store, serialized in any way that is
        accepted by OpenSSH.
        """
        return pulumi.get(self, "key_material")

    @property
    @pulumi.getter
    def path(self) -> pulumi.Output[str]:
        """
        The path within the key store where the key will be stored.
        """
        return pulumi.get(self, "path")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

