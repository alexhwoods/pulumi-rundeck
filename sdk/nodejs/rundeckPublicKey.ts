// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The public key resource allows SSH public keys to be stored into Rundeck's key store.
 * The key store is where Rundeck keeps credentials that are needed to access the nodes on which
 * it runs commands.
 *
 * This resource also allows the retrieval of an existing public key from the store, so that it
 * may be used in the configuration of other resources such as ``awsKeyPair``.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as rundeck from "@pulumi/rundeck";
 *
 * const anvils = new rundeck.RundeckPublicKey("anvils", {
 *     keyMaterial: "ssh-rsa yada-yada-yada",
 *     path: "anvils/id_rsa.pub",
 * });
 * ```
 */
export class RundeckPublicKey extends pulumi.CustomResource {
    /**
     * Get an existing RundeckPublicKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RundeckPublicKeyState, opts?: pulumi.CustomResourceOptions): RundeckPublicKey {
        return new RundeckPublicKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rundeck:index/rundeckPublicKey:RundeckPublicKey';

    /**
     * Returns true if the given object is an instance of RundeckPublicKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RundeckPublicKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RundeckPublicKey.__pulumiType;
    }

    /**
     * True if the key should be deleted when the resource is deleted. 
     * Defaults to true if keyMaterial is provided in the configuration.
     */
    public /*out*/ readonly delete!: pulumi.Output<boolean>;
    /**
     * The public key string to store, serialized in any way that is accepted
     * by OpenSSH. If this is not included, ``keyMaterial`` becomes an attribute that can be used
     * to read the already-existing key material in the Rundeck store.
     */
    public readonly keyMaterial!: pulumi.Output<string>;
    /**
     * The path within the key store where the key will be stored. By convention
     * this path name normally ends with ".pub" and otherwise has the same name as the associated
     * private key.
     */
    public readonly path!: pulumi.Output<string>;
    /**
     * The URL at which the key material can be retrieved from the key store by other clients.
     */
    public /*out*/ readonly url!: pulumi.Output<string>;

    /**
     * Create a RundeckPublicKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RundeckPublicKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RundeckPublicKeyArgs | RundeckPublicKeyState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as RundeckPublicKeyState | undefined;
            inputs["delete"] = state ? state.delete : undefined;
            inputs["keyMaterial"] = state ? state.keyMaterial : undefined;
            inputs["path"] = state ? state.path : undefined;
            inputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as RundeckPublicKeyArgs | undefined;
            if (!args || args.path === undefined) {
                throw new Error("Missing required property 'path'");
            }
            inputs["keyMaterial"] = args ? args.keyMaterial : undefined;
            inputs["path"] = args ? args.path : undefined;
            inputs["delete"] = undefined /*out*/;
            inputs["url"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(RundeckPublicKey.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RundeckPublicKey resources.
 */
export interface RundeckPublicKeyState {
    /**
     * True if the key should be deleted when the resource is deleted. 
     * Defaults to true if keyMaterial is provided in the configuration.
     */
    readonly delete?: pulumi.Input<boolean>;
    /**
     * The public key string to store, serialized in any way that is accepted
     * by OpenSSH. If this is not included, ``keyMaterial`` becomes an attribute that can be used
     * to read the already-existing key material in the Rundeck store.
     */
    readonly keyMaterial?: pulumi.Input<string>;
    /**
     * The path within the key store where the key will be stored. By convention
     * this path name normally ends with ".pub" and otherwise has the same name as the associated
     * private key.
     */
    readonly path?: pulumi.Input<string>;
    /**
     * The URL at which the key material can be retrieved from the key store by other clients.
     */
    readonly url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RundeckPublicKey resource.
 */
export interface RundeckPublicKeyArgs {
    /**
     * The public key string to store, serialized in any way that is accepted
     * by OpenSSH. If this is not included, ``keyMaterial`` becomes an attribute that can be used
     * to read the already-existing key material in the Rundeck store.
     */
    readonly keyMaterial?: pulumi.Input<string>;
    /**
     * The path within the key store where the key will be stored. By convention
     * this path name normally ends with ".pub" and otherwise has the same name as the associated
     * private key.
     */
    readonly path: pulumi.Input<string>;
}
