// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rundeck
{
    /// <summary>
    /// The private key resource allows SSH private keys to be stored into Rundeck's key store.
    /// The key store is where Rundeck keeps credentials that are needed to access the nodes on which
    /// it runs commands.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.IO;
    /// using Pulumi;
    /// using Rundeck = Pulumi.Rundeck;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var anvils = new Rundeck.RundeckPrivateKey("anvils", new Rundeck.RundeckPrivateKeyArgs
    ///         {
    ///             KeyMaterial = File.ReadAllText("/id_rsa"),
    ///             Path = "anvils/id_rsa",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    public partial class RundeckPrivateKey : Pulumi.CustomResource
    {
        /// <summary>
        /// The private key material to store, serialized in any way that is
        /// accepted by OpenSSH.
        /// </summary>
        [Output("keyMaterial")]
        public Output<string> KeyMaterial { get; private set; } = null!;

        /// <summary>
        /// The path within the key store where the key will be stored.
        /// </summary>
        [Output("path")]
        public Output<string> Path { get; private set; } = null!;


        /// <summary>
        /// Create a RundeckPrivateKey resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RundeckPrivateKey(string name, RundeckPrivateKeyArgs args, CustomResourceOptions? options = null)
            : base("rundeck:index/rundeckPrivateKey:RundeckPrivateKey", name, args ?? new RundeckPrivateKeyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RundeckPrivateKey(string name, Input<string> id, RundeckPrivateKeyState? state = null, CustomResourceOptions? options = null)
            : base("rundeck:index/rundeckPrivateKey:RundeckPrivateKey", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RundeckPrivateKey resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RundeckPrivateKey Get(string name, Input<string> id, RundeckPrivateKeyState? state = null, CustomResourceOptions? options = null)
        {
            return new RundeckPrivateKey(name, id, state, options);
        }
    }

    public sealed class RundeckPrivateKeyArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The private key material to store, serialized in any way that is
        /// accepted by OpenSSH.
        /// </summary>
        [Input("keyMaterial", required: true)]
        public Input<string> KeyMaterial { get; set; } = null!;

        /// <summary>
        /// The path within the key store where the key will be stored.
        /// </summary>
        [Input("path", required: true)]
        public Input<string> Path { get; set; } = null!;

        public RundeckPrivateKeyArgs()
        {
        }
    }

    public sealed class RundeckPrivateKeyState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The private key material to store, serialized in any way that is
        /// accepted by OpenSSH.
        /// </summary>
        [Input("keyMaterial")]
        public Input<string>? KeyMaterial { get; set; }

        /// <summary>
        /// The path within the key store where the key will be stored.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        public RundeckPrivateKeyState()
        {
        }
    }
}
